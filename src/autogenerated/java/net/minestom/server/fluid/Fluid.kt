package net.minestom.server.fluid

import net.kyori.adventure.key.Key
import net.minestom.server.item.Material
import net.minestom.server.item.MaterialImpl
import net.minestom.server.item.Enchantment
import net.minestom.server.item.EnchantmentImpl
import net.minestom.server.utils.NamespaceID
import net.kyori.adventure.key.Keyed
import net.minestom.server.registry.Registries
import net.minestom.server.fluid.Fluid
import net.minestom.server.sound.SoundEvent
import net.minestom.server.sound.SoundEventImpl
import net.minestom.server.entity.EntityType
import net.minestom.server.entity.EntityTypeImpl
import net.minestom.server.potion.PotionType
import net.minestom.server.potion.PotionTypeImpl
import net.minestom.server.potion.PotionEffect
import net.minestom.server.potion.PotionEffectImpl
import net.minestom.server.particle.ParticleImpl
import net.minestom.server.statistic.StatisticType
import net.minestom.server.statistic.StatisticTypeImpl

/**
 * AUTOGENERATED by FluidGenerator
 */
enum class Fluid(val namespaceID: NamespaceID) : Keyed {
    EMPTY(NamespaceID.from("minecraft:empty")), FLOWING_WATER(NamespaceID.from("minecraft:flowing_water")), WATER(
        NamespaceID.from("minecraft:water")
    ),
    FLOWING_LAVA(NamespaceID.from("minecraft:flowing_lava")), LAVA(NamespaceID.from("minecraft:lava"));

    init {
        Registries.fluids[namespaceID] = this
    }

    override fun key(): Key {
        return namespaceID
    }

    fun getId(): Short {
        return ordinal.toShort()
    }

    override fun toString(): String {
        return "[" + namespaceID + "]"
    }

    companion object {
        private val VALUES = values()
        fun fromId(id: Short): Fluid? {
            return if (id >= 0 && id < VALUES.size) {
                VALUES[id.toInt()]
            } else null
        }
    }
}