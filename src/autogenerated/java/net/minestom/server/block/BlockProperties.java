package net.minestom.server.block;

import java.util.List;

/**
 * AUTOGENERATED by BlockGenerator
 */
@SuppressWarnings("unused")
public final class BlockProperties {
    public static final BlockProperty<Boolean> ATTACHED = new BlockProperty<>("attached", true, false);

    public static final BlockProperty<Boolean> BOTTOM = new BlockProperty<>("bottom", true, false);

    public static final BlockProperty<Boolean> CONDITIONAL = new BlockProperty<>("conditional", true, false);

    public static final BlockProperty<Boolean> DISARMED = new BlockProperty<>("disarmed", true, false);

    public static final BlockProperty<Boolean> DRAG = new BlockProperty<>("drag", true, false);

    public static final BlockProperty<Boolean> ENABLED = new BlockProperty<>("enabled", true, false);

    public static final BlockProperty<Boolean> EXTENDED = new BlockProperty<>("extended", true, false);

    public static final BlockProperty<Boolean> EYE = new BlockProperty<>("eye", true, false);

    public static final BlockProperty<Boolean> FALLING = new BlockProperty<>("falling", true, false);

    public static final BlockProperty<Boolean> HANGING = new BlockProperty<>("hanging", true, false);

    public static final BlockProperty<Boolean> HAS_BOTTLE_0 = new BlockProperty<>("has_bottle_0", true, false);

    public static final BlockProperty<Boolean> HAS_BOTTLE_1 = new BlockProperty<>("has_bottle_1", true, false);

    public static final BlockProperty<Boolean> HAS_BOTTLE_2 = new BlockProperty<>("has_bottle_2", true, false);

    public static final BlockProperty<Boolean> HAS_RECORD = new BlockProperty<>("has_record", true, false);

    public static final BlockProperty<Boolean> HAS_BOOK = new BlockProperty<>("has_book", true, false);

    public static final BlockProperty<Boolean> INVERTED = new BlockProperty<>("inverted", true, false);

    public static final BlockProperty<Boolean> IN_WALL = new BlockProperty<>("in_wall", true, false);

    public static final BlockProperty<Boolean> LIT = new BlockProperty<>("lit", true, false);

    public static final BlockProperty<Boolean> LOCKED = new BlockProperty<>("locked", true, false);

    public static final BlockProperty<Boolean> OCCUPIED = new BlockProperty<>("occupied", true, false);

    public static final BlockProperty<Boolean> OPEN = new BlockProperty<>("open", true, false);

    public static final BlockProperty<Boolean> PERSISTENT = new BlockProperty<>("persistent", true, false);

    public static final BlockProperty<Boolean> POWERED = new BlockProperty<>("powered", true, false);

    public static final BlockProperty<Boolean> SHORT = new BlockProperty<>("short", true, false);

    public static final BlockProperty<Boolean> SIGNAL_FIRE = new BlockProperty<>("signal_fire", true, false);

    public static final BlockProperty<Boolean> SNOWY = new BlockProperty<>("snowy", true, false);

    public static final BlockProperty<Boolean> TRIGGERED = new BlockProperty<>("triggered", true, false);

    public static final BlockProperty<Boolean> UNSTABLE = new BlockProperty<>("unstable", true, false);

    public static final BlockProperty<Boolean> WATERLOGGED = new BlockProperty<>("waterlogged", true, false);

    public static final BlockProperty<Boolean> VINE_END = new BlockProperty<>("vine_end", true, false);

    public static final BlockProperty<Boolean> BERRIES = new BlockProperty<>("berries", true, false);

    public static final BlockProperty<String> HORIZONTAL_AXIS = new BlockProperty<>("axis", "X", "Z");

    public static final BlockProperty<String> AXIS = new BlockProperty<>("axis", "X", "Y", "Z");

    public static final BlockProperty<Boolean> UP = new BlockProperty<>("up", true, false);

    public static final BlockProperty<Boolean> DOWN = new BlockProperty<>("down", true, false);

    public static final BlockProperty<Boolean> NORTH = new BlockProperty<>("north", true, false);

    public static final BlockProperty<Boolean> EAST = new BlockProperty<>("east", true, false);

    public static final BlockProperty<Boolean> SOUTH = new BlockProperty<>("south", true, false);

    public static final BlockProperty<Boolean> WEST = new BlockProperty<>("west", true, false);

    public static final BlockProperty<String> FACING = new BlockProperty<>("facing", "NORTH", "EAST", "SOUTH", "WEST", "UP", "DOWN");

    public static final BlockProperty<String> FACING_HOPPER = new BlockProperty<>("facing", "DOWN", "NORTH", "SOUTH", "WEST", "EAST");

    public static final BlockProperty<String> HORIZONTAL_FACING = new BlockProperty<>("facing", "NORTH", "SOUTH", "WEST", "EAST");

    public static final BlockProperty<String> ORIENTATION = new BlockProperty<>("orientation", "DOWN_EAST", "DOWN_NORTH", "DOWN_SOUTH", "DOWN_WEST", "UP_EAST", "UP_NORTH", "UP_SOUTH", "UP_WEST", "WEST_UP", "EAST_UP", "NORTH_UP", "SOUTH_UP");

    public static final BlockProperty<String> ATTACH_FACE = new BlockProperty<>("face", "FLOOR", "WALL", "CEILING");

    public static final BlockProperty<String> BELL_ATTACHMENT = new BlockProperty<>("attachment", "FLOOR", "CEILING", "SINGLE_WALL", "DOUBLE_WALL");

    public static final BlockProperty<String> EAST_WALL = new BlockProperty<>("east", "NONE", "LOW", "TALL");

    public static final BlockProperty<String> NORTH_WALL = new BlockProperty<>("north", "NONE", "LOW", "TALL");

    public static final BlockProperty<String> SOUTH_WALL = new BlockProperty<>("south", "NONE", "LOW", "TALL");

    public static final BlockProperty<String> WEST_WALL = new BlockProperty<>("west", "NONE", "LOW", "TALL");

    public static final BlockProperty<String> EAST_REDSTONE = new BlockProperty<>("east", "UP", "SIDE", "NONE");

    public static final BlockProperty<String> NORTH_REDSTONE = new BlockProperty<>("north", "UP", "SIDE", "NONE");

    public static final BlockProperty<String> SOUTH_REDSTONE = new BlockProperty<>("south", "UP", "SIDE", "NONE");

    public static final BlockProperty<String> WEST_REDSTONE = new BlockProperty<>("west", "UP", "SIDE", "NONE");

    public static final BlockProperty<String> DOUBLE_BLOCK_HALF = new BlockProperty<>("half", "UPPER", "LOWER");

    public static final BlockProperty<String> HALF = new BlockProperty<>("half", "TOP", "BOTTOM");

    public static final BlockProperty<String> RAIL_SHAPE = new BlockProperty<>("shape", "NORTH_SOUTH", "EAST_WEST", "ASCENDING_EAST", "ASCENDING_WEST", "ASCENDING_NORTH", "ASCENDING_SOUTH", "SOUTH_EAST", "SOUTH_WEST", "NORTH_WEST", "NORTH_EAST");

    public static final BlockProperty<String> RAIL_SHAPE_STRAIGHT = new BlockProperty<>("shape", "NORTH_SOUTH", "EAST_WEST", "ASCENDING_EAST", "ASCENDING_WEST", "ASCENDING_NORTH", "ASCENDING_SOUTH");

    public static final BlockProperty<Integer> AGE_1 = new BlockProperty<>("age", 0, 1);

    public static final BlockProperty<Integer> AGE_2 = new BlockProperty<>("age", 0, 1, 2);

    public static final BlockProperty<Integer> AGE_3 = new BlockProperty<>("age", 0, 1, 2, 3);

    public static final BlockProperty<Integer> AGE_5 = new BlockProperty<>("age", 0, 1, 2, 3, 4, 5);

    public static final BlockProperty<Integer> AGE_7 = new BlockProperty<>("age", 0, 1, 2, 3, 4, 5, 6, 7);

    public static final BlockProperty<Integer> AGE_15 = new BlockProperty<>("age", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

    public static final BlockProperty<Integer> AGE_25 = new BlockProperty<>("age", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25);

    public static final BlockProperty<Integer> BITES = new BlockProperty<>("bites", 0, 1, 2, 3, 4, 5, 6);

    public static final BlockProperty<Integer> CANDLES = new BlockProperty<>("candles", 1, 2, 3, 4);

    public static final BlockProperty<Integer> DELAY = new BlockProperty<>("delay", 1, 2, 3, 4);

    public static final BlockProperty<Integer> DISTANCE = new BlockProperty<>("distance", 1, 2, 3, 4, 5, 6, 7);

    public static final BlockProperty<Integer> EGGS = new BlockProperty<>("eggs", 1, 2, 3, 4);

    public static final BlockProperty<Integer> HATCH = new BlockProperty<>("hatch", 0, 1, 2);

    public static final BlockProperty<Integer> LAYERS = new BlockProperty<>("layers", 1, 2, 3, 4, 5, 6, 7, 8);

    public static final BlockProperty<Integer> LEVEL_CAULDRON = new BlockProperty<>("level", 1, 2, 3);

    public static final BlockProperty<Integer> LEVEL_COMPOSTER = new BlockProperty<>("level", 0, 1, 2, 3, 4, 5, 6, 7, 8);

    public static final BlockProperty<Integer> LEVEL_FLOWING = new BlockProperty<>("level", 1, 2, 3, 4, 5, 6, 7, 8);

    public static final BlockProperty<Integer> LEVEL_HONEY = new BlockProperty<>("honey_level", 0, 1, 2, 3, 4, 5);

    public static final BlockProperty<Integer> LEVEL = new BlockProperty<>("level", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

    public static final BlockProperty<Integer> MOISTURE = new BlockProperty<>("moisture", 0, 1, 2, 3, 4, 5, 6, 7);

    public static final BlockProperty<Integer> NOTE = new BlockProperty<>("note", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24);

    public static final BlockProperty<Integer> PICKLES = new BlockProperty<>("pickles", 1, 2, 3, 4);

    public static final BlockProperty<Integer> POWER = new BlockProperty<>("power", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

    public static final BlockProperty<Integer> STAGE = new BlockProperty<>("stage", 0, 1);

    public static final BlockProperty<Integer> STABILITY_DISTANCE = new BlockProperty<>("distance", 0, 1, 2, 3, 4, 5, 6, 7);

    public static final BlockProperty<Integer> RESPAWN_ANCHOR_CHARGES = new BlockProperty<>("charges", 0, 1, 2, 3, 4);

    public static final BlockProperty<Integer> ROTATION_16 = new BlockProperty<>("rotation", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

    public static final BlockProperty<String> BED_PART = new BlockProperty<>("part", "HEAD", "FOOT");

    public static final BlockProperty<String> CHEST_TYPE = new BlockProperty<>("type", "SINGLE", "LEFT", "RIGHT");

    public static final BlockProperty<String> MODE_COMPARATOR = new BlockProperty<>("mode", "COMPARE", "SUBTRACT");

    public static final BlockProperty<String> DOOR_HINGE = new BlockProperty<>("hinge", "LEFT", "RIGHT");

    public static final BlockProperty<String> NOTEBLOCK_INSTRUMENT = new BlockProperty<>("instrument", "HARP", "BASEDRUM", "SNARE", "HAT", "BASS", "FLUTE", "BELL", "GUITAR", "CHIME", "XYLOPHONE", "IRON_XYLOPHONE", "COW_BELL", "DIDGERIDOO", "BIT", "BANJO", "PLING");

    public static final BlockProperty<String> PISTON_TYPE = new BlockProperty<>("type", "DEFAULT", "STICKY");

    public static final BlockProperty<String> SLAB_TYPE = new BlockProperty<>("type", "TOP", "BOTTOM", "DOUBLE");

    public static final BlockProperty<String> STAIRS_SHAPE = new BlockProperty<>("shape", "STRAIGHT", "INNER_LEFT", "INNER_RIGHT", "OUTER_LEFT", "OUTER_RIGHT");

    public static final BlockProperty<String> STRUCTUREBLOCK_MODE = new BlockProperty<>("mode", "SAVE", "LOAD", "CORNER", "DATA");

    public static final BlockProperty<String> BAMBOO_LEAVES = new BlockProperty<>("leaves", "NONE", "SMALL", "LARGE");

    public static final BlockProperty<String> TILT = new BlockProperty<>("tilt", "NONE", "UNSTABLE", "PARTIAL", "FULL");

    public static final BlockProperty<String> VERTICAL_DIRECTION = new BlockProperty<>("vertical_direction", "UP", "DOWN");

    public static final BlockProperty<String> DRIPSTONE_THICKNESS = new BlockProperty<>("thickness", "TIP_MERGE", "TIP", "FRUSTUM", "MIDDLE", "BASE");

    public static final BlockProperty<String> SCULK_SENSOR_PHASE = new BlockProperty<>("sculk_sensor_phase", "INACTIVE", "ACTIVE", "COOLDOWN");

    private BlockProperties() {
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GRASS_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#SNOWY}</li>
     * </ul>
     */
    public static final class GRASS_BLOCK {
        /**
         * Definition: "snowy" = [true, false]
         */
        public static final BlockProperty<Boolean> SNOWY = BlockProperties.SNOWY;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SNOWY);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PODZOL} can have:
     * <ul>
     * <li>{@link BlockProperties#SNOWY}</li>
     * </ul>
     */
    public static final class PODZOL {
        /**
         * Definition: "snowy" = [true, false]
         */
        public static final BlockProperty<Boolean> SNOWY = BlockProperties.SNOWY;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SNOWY);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#OAK_SAPLING} can have:
     * <ul>
     * <li>{@link BlockProperties#STAGE}</li>
     * </ul>
     */
    public static final class OAK_SAPLING {
        /**
         * Definition: "stage" = [0, 1]
         */
        public static final BlockProperty<Integer> STAGE = BlockProperties.STAGE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(STAGE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SPRUCE_SAPLING} can have:
     * <ul>
     * <li>{@link BlockProperties#STAGE}</li>
     * </ul>
     */
    public static final class SPRUCE_SAPLING {
        /**
         * Definition: "stage" = [0, 1]
         */
        public static final BlockProperty<Integer> STAGE = BlockProperties.STAGE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(STAGE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BIRCH_SAPLING} can have:
     * <ul>
     * <li>{@link BlockProperties#STAGE}</li>
     * </ul>
     */
    public static final class BIRCH_SAPLING {
        /**
         * Definition: "stage" = [0, 1]
         */
        public static final BlockProperty<Integer> STAGE = BlockProperties.STAGE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(STAGE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#JUNGLE_SAPLING} can have:
     * <ul>
     * <li>{@link BlockProperties#STAGE}</li>
     * </ul>
     */
    public static final class JUNGLE_SAPLING {
        /**
         * Definition: "stage" = [0, 1]
         */
        public static final BlockProperty<Integer> STAGE = BlockProperties.STAGE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(STAGE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ACACIA_SAPLING} can have:
     * <ul>
     * <li>{@link BlockProperties#STAGE}</li>
     * </ul>
     */
    public static final class ACACIA_SAPLING {
        /**
         * Definition: "stage" = [0, 1]
         */
        public static final BlockProperty<Integer> STAGE = BlockProperties.STAGE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(STAGE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DARK_OAK_SAPLING} can have:
     * <ul>
     * <li>{@link BlockProperties#STAGE}</li>
     * </ul>
     */
    public static final class DARK_OAK_SAPLING {
        /**
         * Definition: "stage" = [0, 1]
         */
        public static final BlockProperty<Integer> STAGE = BlockProperties.STAGE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(STAGE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WATER} can have:
     * <ul>
     * <li>{@link BlockProperties#LEVEL}</li>
     * </ul>
     */
    public static final class WATER {
        /**
         * Definition: "level" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> LEVEL = BlockProperties.LEVEL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LEVEL);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LAVA} can have:
     * <ul>
     * <li>{@link BlockProperties#LEVEL}</li>
     * </ul>
     */
    public static final class LAVA {
        /**
         * Definition: "level" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> LEVEL = BlockProperties.LEVEL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LEVEL);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#OAK_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class OAK_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SPRUCE_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class SPRUCE_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BIRCH_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class BIRCH_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#JUNGLE_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class JUNGLE_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ACACIA_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class ACACIA_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DARK_OAK_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class DARK_OAK_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_SPRUCE_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_SPRUCE_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_BIRCH_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_BIRCH_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_JUNGLE_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_JUNGLE_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_ACACIA_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_ACACIA_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_DARK_OAK_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_DARK_OAK_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_OAK_LOG} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_OAK_LOG {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#OAK_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class OAK_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SPRUCE_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class SPRUCE_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BIRCH_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class BIRCH_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#JUNGLE_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class JUNGLE_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ACACIA_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class ACACIA_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DARK_OAK_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class DARK_OAK_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_OAK_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_OAK_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_SPRUCE_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_SPRUCE_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_BIRCH_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_BIRCH_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_JUNGLE_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_JUNGLE_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_ACACIA_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_ACACIA_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_DARK_OAK_WOOD} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_DARK_OAK_WOOD {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#OAK_LEAVES} can have:
     * <ul>
     * <li>{@link BlockProperties#DISTANCE}</li>
     * <li>{@link BlockProperties#PERSISTENT}</li>
     * </ul>
     */
    public static final class OAK_LEAVES {
        /**
         * Definition: "distance" = [1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> DISTANCE = BlockProperties.DISTANCE;

        /**
         * Definition: "persistent" = [true, false]
         */
        public static final BlockProperty<Boolean> PERSISTENT = BlockProperties.PERSISTENT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DISTANCE, PERSISTENT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_LEAVES} can have:
     * <ul>
     * <li>{@link BlockProperties#DISTANCE}</li>
     * <li>{@link BlockProperties#PERSISTENT}</li>
     * </ul>
     */
    public static final class SPRUCE_LEAVES {
        /**
         * Definition: "distance" = [1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> DISTANCE = BlockProperties.DISTANCE;

        /**
         * Definition: "persistent" = [true, false]
         */
        public static final BlockProperty<Boolean> PERSISTENT = BlockProperties.PERSISTENT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DISTANCE, PERSISTENT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_LEAVES} can have:
     * <ul>
     * <li>{@link BlockProperties#DISTANCE}</li>
     * <li>{@link BlockProperties#PERSISTENT}</li>
     * </ul>
     */
    public static final class BIRCH_LEAVES {
        /**
         * Definition: "distance" = [1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> DISTANCE = BlockProperties.DISTANCE;

        /**
         * Definition: "persistent" = [true, false]
         */
        public static final BlockProperty<Boolean> PERSISTENT = BlockProperties.PERSISTENT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DISTANCE, PERSISTENT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_LEAVES} can have:
     * <ul>
     * <li>{@link BlockProperties#DISTANCE}</li>
     * <li>{@link BlockProperties#PERSISTENT}</li>
     * </ul>
     */
    public static final class JUNGLE_LEAVES {
        /**
         * Definition: "distance" = [1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> DISTANCE = BlockProperties.DISTANCE;

        /**
         * Definition: "persistent" = [true, false]
         */
        public static final BlockProperty<Boolean> PERSISTENT = BlockProperties.PERSISTENT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DISTANCE, PERSISTENT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_LEAVES} can have:
     * <ul>
     * <li>{@link BlockProperties#DISTANCE}</li>
     * <li>{@link BlockProperties#PERSISTENT}</li>
     * </ul>
     */
    public static final class ACACIA_LEAVES {
        /**
         * Definition: "distance" = [1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> DISTANCE = BlockProperties.DISTANCE;

        /**
         * Definition: "persistent" = [true, false]
         */
        public static final BlockProperty<Boolean> PERSISTENT = BlockProperties.PERSISTENT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DISTANCE, PERSISTENT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_LEAVES} can have:
     * <ul>
     * <li>{@link BlockProperties#DISTANCE}</li>
     * <li>{@link BlockProperties#PERSISTENT}</li>
     * </ul>
     */
    public static final class DARK_OAK_LEAVES {
        /**
         * Definition: "distance" = [1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> DISTANCE = BlockProperties.DISTANCE;

        /**
         * Definition: "persistent" = [true, false]
         */
        public static final BlockProperty<Boolean> PERSISTENT = BlockProperties.PERSISTENT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DISTANCE, PERSISTENT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#AZALEA_LEAVES} can have:
     * <ul>
     * <li>{@link BlockProperties#DISTANCE}</li>
     * <li>{@link BlockProperties#PERSISTENT}</li>
     * </ul>
     */
    public static final class AZALEA_LEAVES {
        /**
         * Definition: "distance" = [1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> DISTANCE = BlockProperties.DISTANCE;

        /**
         * Definition: "persistent" = [true, false]
         */
        public static final BlockProperty<Boolean> PERSISTENT = BlockProperties.PERSISTENT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DISTANCE, PERSISTENT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#FLOWERING_AZALEA_LEAVES} can have:
     * <ul>
     * <li>{@link BlockProperties#DISTANCE}</li>
     * <li>{@link BlockProperties#PERSISTENT}</li>
     * </ul>
     */
    public static final class FLOWERING_AZALEA_LEAVES {
        /**
         * Definition: "distance" = [1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> DISTANCE = BlockProperties.DISTANCE;

        /**
         * Definition: "persistent" = [true, false]
         */
        public static final BlockProperty<Boolean> PERSISTENT = BlockProperties.PERSISTENT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DISTANCE, PERSISTENT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DISPENSER} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#TRIGGERED}</li>
     * </ul>
     */
    public static final class DISPENSER {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "triggered" = [true, false]
         */
        public static final BlockProperty<Boolean> TRIGGERED = BlockProperties.TRIGGERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, TRIGGERED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#NOTE_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#NOTEBLOCK_INSTRUMENT}</li>
     * <li>{@link BlockProperties#NOTE}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class NOTE_BLOCK {
        /**
         * Definition: "instrument" = ["harp", "basedrum", "snare", "hat", "bass", "flute", "bell", "guitar", "chime", "xylophone", "iron_xylophone", "cow_bell", "didgeridoo", "bit", "banjo", "pling"]
         */
        public static final BlockProperty<String> NOTEBLOCK_INSTRUMENT = BlockProperties.NOTEBLOCK_INSTRUMENT;

        /**
         * Definition: "note" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
         */
        public static final BlockProperty<Integer> NOTE = BlockProperties.NOTE;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(NOTEBLOCK_INSTRUMENT, NOTE, POWERED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#WHITE_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class WHITE_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#ORANGE_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class ORANGE_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#MAGENTA_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class MAGENTA_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#LIGHT_BLUE_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class LIGHT_BLUE_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#YELLOW_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class YELLOW_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#LIME_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class LIME_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#PINK_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class PINK_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#GRAY_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class GRAY_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#LIGHT_GRAY_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class LIGHT_GRAY_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#CYAN_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class CYAN_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#PURPLE_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class PURPLE_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BLUE_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class BLUE_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BROWN_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class BROWN_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#GREEN_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class GREEN_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#RED_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class RED_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BLACK_BED} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#OCCUPIED}</li>
     * <li>{@link BlockProperties#BED_PART}</li>
     * </ul>
     */
    public static final class BLACK_BED {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "occupied" = [true, false]
         */
        public static final BlockProperty<Boolean> OCCUPIED = BlockProperties.OCCUPIED;

        /**
         * Definition: "part" = ["head", "foot"]
         */
        public static final BlockProperty<String> BED_PART = BlockProperties.BED_PART;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, OCCUPIED, BED_PART);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#POWERED_RAIL} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#RAIL_SHAPE_STRAIGHT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POWERED_RAIL {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "shape" = ["north_south", "east_west", "ascending_east", "ascending_west", "ascending_north", "ascending_south"]
         */
        public static final BlockProperty<String> RAIL_SHAPE_STRAIGHT = BlockProperties.RAIL_SHAPE_STRAIGHT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED, RAIL_SHAPE_STRAIGHT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#DETECTOR_RAIL} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#RAIL_SHAPE_STRAIGHT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DETECTOR_RAIL {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "shape" = ["north_south", "east_west", "ascending_east", "ascending_west", "ascending_north", "ascending_south"]
         */
        public static final BlockProperty<String> RAIL_SHAPE_STRAIGHT = BlockProperties.RAIL_SHAPE_STRAIGHT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED, RAIL_SHAPE_STRAIGHT, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#STICKY_PISTON} can have:
     * <ul>
     * <li>{@link BlockProperties#EXTENDED}</li>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class STICKY_PISTON {
        /**
         * Definition: "extended" = [true, false]
         */
        public static final BlockProperty<Boolean> EXTENDED = BlockProperties.EXTENDED;

        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EXTENDED, FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#TALL_SEAGRASS} can have:
     * <ul>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * </ul>
     */
    public static final class TALL_SEAGRASS {
        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOUBLE_BLOCK_HALF);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#PISTON} can have:
     * <ul>
     * <li>{@link BlockProperties#EXTENDED}</li>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class PISTON {
        /**
         * Definition: "extended" = [true, false]
         */
        public static final BlockProperty<Boolean> EXTENDED = BlockProperties.EXTENDED;

        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EXTENDED, FACING);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#PISTON_HEAD} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#SHORT}</li>
     * <li>{@link BlockProperties#PISTON_TYPE}</li>
     * </ul>
     */
    public static final class PISTON_HEAD {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "short" = [true, false]
         */
        public static final BlockProperty<Boolean> SHORT = BlockProperties.SHORT;

        /**
         * Definition: "type" = ["default", "sticky"]
         */
        public static final BlockProperty<String> PISTON_TYPE = BlockProperties.PISTON_TYPE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, SHORT, PISTON_TYPE);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#MOVING_PISTON} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#PISTON_TYPE}</li>
     * </ul>
     */
    public static final class MOVING_PISTON {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "type" = ["default", "sticky"]
         */
        public static final BlockProperty<String> PISTON_TYPE = BlockProperties.PISTON_TYPE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, PISTON_TYPE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#TNT} can have:
     * <ul>
     * <li>{@link BlockProperties#UNSTABLE}</li>
     * </ul>
     */
    public static final class TNT {
        /**
         * Definition: "unstable" = [true, false]
         */
        public static final BlockProperty<Boolean> UNSTABLE = BlockProperties.UNSTABLE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(UNSTABLE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WALL_TORCH} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class WALL_TORCH {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#FIRE} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_15}</li>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class FIRE {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> AGE_15 = BlockProperties.AGE_15;

        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_15, EAST, NORTH, SOUTH, UP, WEST);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#OAK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class OAK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#CHEST} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#CHEST_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CHEST {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "type" = ["single", "left", "right"]
         */
        public static final BlockProperty<String> CHEST_TYPE = BlockProperties.CHEST_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, CHEST_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#REDSTONE_WIRE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_REDSTONE}</li>
     * <li>{@link BlockProperties#NORTH_REDSTONE}</li>
     * <li>{@link BlockProperties#POWER}</li>
     * <li>{@link BlockProperties#SOUTH_REDSTONE}</li>
     * <li>{@link BlockProperties#WEST_REDSTONE}</li>
     * </ul>
     */
    public static final class REDSTONE_WIRE {
        /**
         * Definition: "east" = ["up", "side", "none"]
         */
        public static final BlockProperty<String> EAST_REDSTONE = BlockProperties.EAST_REDSTONE;

        /**
         * Definition: "north" = ["up", "side", "none"]
         */
        public static final BlockProperty<String> NORTH_REDSTONE = BlockProperties.NORTH_REDSTONE;

        /**
         * Definition: "power" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> POWER = BlockProperties.POWER;

        /**
         * Definition: "south" = ["up", "side", "none"]
         */
        public static final BlockProperty<String> SOUTH_REDSTONE = BlockProperties.SOUTH_REDSTONE;

        /**
         * Definition: "west" = ["up", "side", "none"]
         */
        public static final BlockProperty<String> WEST_REDSTONE = BlockProperties.WEST_REDSTONE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_REDSTONE, NORTH_REDSTONE, POWER, SOUTH_REDSTONE, WEST_REDSTONE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WHEAT} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_7}</li>
     * </ul>
     */
    public static final class WHEAT {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> AGE_7 = BlockProperties.AGE_7;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_7);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#FARMLAND} can have:
     * <ul>
     * <li>{@link BlockProperties#MOISTURE}</li>
     * </ul>
     */
    public static final class FARMLAND {
        /**
         * Definition: "moisture" = [0, 1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> MOISTURE = BlockProperties.MOISTURE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(MOISTURE);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#FURNACE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class FURNACE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, LIT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#OAK_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class OAK_SIGN {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SPRUCE_SIGN {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BIRCH_SIGN {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ACACIA_SIGN {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class JUNGLE_SIGN {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DARK_OAK_SIGN {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#OAK_DOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#DOOR_HINGE}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class OAK_DOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "hinge" = ["left", "right"]
         */
        public static final BlockProperty<String> DOOR_HINGE = BlockProperties.DOOR_HINGE;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, DOOR_HINGE, OPEN, POWERED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#LADDER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class LADDER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#RAIL} can have:
     * <ul>
     * <li>{@link BlockProperties#RAIL_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class RAIL {
        /**
         * Definition: "shape" = ["north_south", "east_west", "ascending_east", "ascending_west", "ascending_north", "ascending_south", "south_east", "south_west", "north_west", "north_east"]
         */
        public static final BlockProperty<String> RAIL_SHAPE = BlockProperties.RAIL_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(RAIL_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#COBBLESTONE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class COBBLESTONE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#OAK_WALL_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class OAK_WALL_SIGN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_WALL_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SPRUCE_WALL_SIGN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_WALL_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BIRCH_WALL_SIGN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_WALL_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ACACIA_WALL_SIGN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_WALL_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class JUNGLE_WALL_SIGN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_WALL_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DARK_OAK_WALL_SIGN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#LEVER} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class LEVER {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STONE_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class STONE_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#IRON_DOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#DOOR_HINGE}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class IRON_DOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "hinge" = ["left", "right"]
         */
        public static final BlockProperty<String> DOOR_HINGE = BlockProperties.DOOR_HINGE;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, DOOR_HINGE, OPEN, POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#OAK_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class OAK_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SPRUCE_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class SPRUCE_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BIRCH_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class BIRCH_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#JUNGLE_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class JUNGLE_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ACACIA_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class ACACIA_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DARK_OAK_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class DARK_OAK_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#REDSTONE_ORE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class REDSTONE_ORE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEEPSLATE_REDSTONE_ORE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class DEEPSLATE_REDSTONE_ORE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#REDSTONE_TORCH} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class REDSTONE_TORCH {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#REDSTONE_WALL_TORCH} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class REDSTONE_WALL_TORCH {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, LIT);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#STONE_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class STONE_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SNOW} can have:
     * <ul>
     * <li>{@link BlockProperties#LAYERS}</li>
     * </ul>
     */
    public static final class SNOW {
        /**
         * Definition: "layers" = [1, 2, 3, 4, 5, 6, 7, 8]
         */
        public static final BlockProperty<Integer> LAYERS = BlockProperties.LAYERS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LAYERS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CACTUS} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_15}</li>
     * </ul>
     */
    public static final class CACTUS {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> AGE_15 = BlockProperties.AGE_15;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_15);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SUGAR_CANE} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_15}</li>
     * </ul>
     */
    public static final class SUGAR_CANE {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> AGE_15 = BlockProperties.AGE_15;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_15);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#JUKEBOX} can have:
     * <ul>
     * <li>{@link BlockProperties#HAS_RECORD}</li>
     * </ul>
     */
    public static final class JUKEBOX {
        /**
         * Definition: "has_record" = [true, false]
         */
        public static final BlockProperty<Boolean> HAS_RECORD = BlockProperties.HAS_RECORD;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HAS_RECORD);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#OAK_FENCE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class OAK_FENCE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BASALT} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class BASALT {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#POLISHED_BASALT} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class POLISHED_BASALT {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SOUL_WALL_TORCH} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class SOUL_WALL_TORCH {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#NETHER_PORTAL} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_AXIS}</li>
     * </ul>
     */
    public static final class NETHER_PORTAL {
        /**
         * Definition: "axis" = ["x", "z"]
         */
        public static final BlockProperty<String> HORIZONTAL_AXIS = BlockProperties.HORIZONTAL_AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CARVED_PUMPKIN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class CARVED_PUMPKIN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#JACK_O_LANTERN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class JACK_O_LANTERN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#BITES}</li>
     * </ul>
     */
    public static final class CAKE {
        /**
         * Definition: "bites" = [0, 1, 2, 3, 4, 5, 6]
         */
        public static final BlockProperty<Integer> BITES = BlockProperties.BITES;

        static List<BlockProperty<?>> getProperties() {
            return List.of(BITES);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#REPEATER} can have:
     * <ul>
     * <li>{@link BlockProperties#DELAY}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#LOCKED}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class REPEATER {
        /**
         * Definition: "delay" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> DELAY = BlockProperties.DELAY;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "locked" = [true, false]
         */
        public static final BlockProperty<Boolean> LOCKED = BlockProperties.LOCKED;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DELAY, HORIZONTAL_FACING, LOCKED, POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#OAK_TRAPDOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class OAK_TRAPDOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, OPEN, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_TRAPDOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SPRUCE_TRAPDOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, OPEN, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_TRAPDOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BIRCH_TRAPDOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, OPEN, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_TRAPDOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class JUNGLE_TRAPDOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, OPEN, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_TRAPDOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ACACIA_TRAPDOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, OPEN, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_TRAPDOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DARK_OAK_TRAPDOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, OPEN, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#BROWN_MUSHROOM_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#DOWN}</li>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class BROWN_MUSHROOM_BLOCK {
        /**
         * Definition: "down" = [true, false]
         */
        public static final BlockProperty<Boolean> DOWN = BlockProperties.DOWN;

        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOWN, EAST, NORTH, SOUTH, UP, WEST);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#RED_MUSHROOM_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#DOWN}</li>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class RED_MUSHROOM_BLOCK {
        /**
         * Definition: "down" = [true, false]
         */
        public static final BlockProperty<Boolean> DOWN = BlockProperties.DOWN;

        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOWN, EAST, NORTH, SOUTH, UP, WEST);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#MUSHROOM_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#DOWN}</li>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class MUSHROOM_STEM {
        /**
         * Definition: "down" = [true, false]
         */
        public static final BlockProperty<Boolean> DOWN = BlockProperties.DOWN;

        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOWN, EAST, NORTH, SOUTH, UP, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#IRON_BARS} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class IRON_BARS {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#CHAIN} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CHAIN {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ATTACHED_PUMPKIN_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class ATTACHED_PUMPKIN_STEM {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ATTACHED_MELON_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class ATTACHED_MELON_STEM {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PUMPKIN_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_7}</li>
     * </ul>
     */
    public static final class PUMPKIN_STEM {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> AGE_7 = BlockProperties.AGE_7;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_7);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#MELON_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_7}</li>
     * </ul>
     */
    public static final class MELON_STEM {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> AGE_7 = BlockProperties.AGE_7;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_7);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#VINE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class VINE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, UP, WEST);
        }
    }

    /**
     * Represents the 7 {@link BlockProperty properties} that {@link BlockConstants#GLOW_LICHEN} can have:
     * <ul>
     * <li>{@link BlockProperties#DOWN}</li>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class GLOW_LICHEN {
        /**
         * Definition: "down" = [true, false]
         */
        public static final BlockProperty<Boolean> DOWN = BlockProperties.DOWN;

        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOWN, EAST, NORTH, SOUTH, UP, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#OAK_FENCE_GATE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#IN_WALL}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class OAK_FENCE_GATE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "in_wall" = [true, false]
         */
        public static final BlockProperty<Boolean> IN_WALL = BlockProperties.IN_WALL;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, IN_WALL, OPEN, POWERED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#BRICK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BRICK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#STONE_BRICK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class STONE_BRICK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#MYCELIUM} can have:
     * <ul>
     * <li>{@link BlockProperties#SNOWY}</li>
     * </ul>
     */
    public static final class MYCELIUM {
        /**
         * Definition: "snowy" = [true, false]
         */
        public static final BlockProperty<Boolean> SNOWY = BlockProperties.SNOWY;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SNOWY);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#NETHER_BRICK_FENCE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class NETHER_BRICK_FENCE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#NETHER_BRICK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class NETHER_BRICK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#NETHER_WART} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_3}</li>
     * </ul>
     */
    public static final class NETHER_WART {
        /**
         * Definition: "age" = [0, 1, 2, 3]
         */
        public static final BlockProperty<Integer> AGE_3 = BlockProperties.AGE_3;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_3);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BREWING_STAND} can have:
     * <ul>
     * <li>{@link BlockProperties#HAS_BOTTLE_0}</li>
     * <li>{@link BlockProperties#HAS_BOTTLE_1}</li>
     * <li>{@link BlockProperties#HAS_BOTTLE_2}</li>
     * </ul>
     */
    public static final class BREWING_STAND {
        /**
         * Definition: "has_bottle_0" = [true, false]
         */
        public static final BlockProperty<Boolean> HAS_BOTTLE_0 = BlockProperties.HAS_BOTTLE_0;

        /**
         * Definition: "has_bottle_1" = [true, false]
         */
        public static final BlockProperty<Boolean> HAS_BOTTLE_1 = BlockProperties.HAS_BOTTLE_1;

        /**
         * Definition: "has_bottle_2" = [true, false]
         */
        public static final BlockProperty<Boolean> HAS_BOTTLE_2 = BlockProperties.HAS_BOTTLE_2;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HAS_BOTTLE_0, HAS_BOTTLE_1, HAS_BOTTLE_2);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WATER_CAULDRON} can have:
     * <ul>
     * <li>{@link BlockProperties#LEVEL_CAULDRON}</li>
     * </ul>
     */
    public static final class WATER_CAULDRON {
        /**
         * Definition: "level" = [1, 2, 3]
         */
        public static final BlockProperty<Integer> LEVEL_CAULDRON = BlockProperties.LEVEL_CAULDRON;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LEVEL_CAULDRON);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#POWDER_SNOW_CAULDRON} can have:
     * <ul>
     * <li>{@link BlockProperties#LEVEL_CAULDRON}</li>
     * </ul>
     */
    public static final class POWDER_SNOW_CAULDRON {
        /**
         * Definition: "level" = [1, 2, 3]
         */
        public static final BlockProperty<Integer> LEVEL_CAULDRON = BlockProperties.LEVEL_CAULDRON;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LEVEL_CAULDRON);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#END_PORTAL_FRAME} can have:
     * <ul>
     * <li>{@link BlockProperties#EYE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class END_PORTAL_FRAME {
        /**
         * Definition: "eye" = [true, false]
         */
        public static final BlockProperty<Boolean> EYE = BlockProperties.EYE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EYE, HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#REDSTONE_LAMP} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class REDSTONE_LAMP {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#COCOA} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_2}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class COCOA {
        /**
         * Definition: "age" = [0, 1, 2]
         */
        public static final BlockProperty<Integer> AGE_2 = BlockProperties.AGE_2;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_2, HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#SANDSTONE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SANDSTONE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#ENDER_CHEST} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ENDER_CHEST {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#TRIPWIRE_HOOK} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACHED}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class TRIPWIRE_HOOK {
        /**
         * Definition: "attached" = [true, false]
         */
        public static final BlockProperty<Boolean> ATTACHED = BlockProperties.ATTACHED;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACHED, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 7 {@link BlockProperty properties} that {@link BlockConstants#TRIPWIRE} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACHED}</li>
     * <li>{@link BlockProperties#DISARMED}</li>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class TRIPWIRE {
        /**
         * Definition: "attached" = [true, false]
         */
        public static final BlockProperty<Boolean> ATTACHED = BlockProperties.ATTACHED;

        /**
         * Definition: "disarmed" = [true, false]
         */
        public static final BlockProperty<Boolean> DISARMED = BlockProperties.DISARMED;

        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACHED, DISARMED, EAST, NORTH, POWERED, SOUTH, WEST);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SPRUCE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BIRCH_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class JUNGLE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#COMMAND_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#CONDITIONAL}</li>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class COMMAND_BLOCK {
        /**
         * Definition: "conditional" = [true, false]
         */
        public static final BlockProperty<Boolean> CONDITIONAL = BlockProperties.CONDITIONAL;

        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CONDITIONAL, FACING);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#COBBLESTONE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class COBBLESTONE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#MOSSY_COBBLESTONE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class MOSSY_COBBLESTONE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CARROTS} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_7}</li>
     * </ul>
     */
    public static final class CARROTS {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> AGE_7 = BlockProperties.AGE_7;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_7);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#POTATOES} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_7}</li>
     * </ul>
     */
    public static final class POTATOES {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> AGE_7 = BlockProperties.AGE_7;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_7);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#OAK_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class OAK_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class SPRUCE_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class BIRCH_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class JUNGLE_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class ACACIA_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class DARK_OAK_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SKELETON_SKULL} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class SKELETON_SKULL {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SKELETON_WALL_SKULL} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class SKELETON_WALL_SKULL {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WITHER_SKELETON_SKULL} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class WITHER_SKELETON_SKULL {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WITHER_SKELETON_WALL_SKULL} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class WITHER_SKELETON_WALL_SKULL {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ZOMBIE_HEAD} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class ZOMBIE_HEAD {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ZOMBIE_WALL_HEAD} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class ZOMBIE_WALL_HEAD {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PLAYER_HEAD} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class PLAYER_HEAD {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PLAYER_WALL_HEAD} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class PLAYER_WALL_HEAD {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CREEPER_HEAD} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class CREEPER_HEAD {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CREEPER_WALL_HEAD} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class CREEPER_WALL_HEAD {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DRAGON_HEAD} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class DRAGON_HEAD {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DRAGON_WALL_HEAD} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class DRAGON_WALL_HEAD {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ANVIL} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class ANVIL {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CHIPPED_ANVIL} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class CHIPPED_ANVIL {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DAMAGED_ANVIL} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class DAMAGED_ANVIL {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#TRAPPED_CHEST} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#CHEST_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class TRAPPED_CHEST {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "type" = ["single", "left", "right"]
         */
        public static final BlockProperty<String> CHEST_TYPE = BlockProperties.CHEST_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, CHEST_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_WEIGHTED_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWER}</li>
     * </ul>
     */
    public static final class LIGHT_WEIGHTED_PRESSURE_PLATE {
        /**
         * Definition: "power" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> POWER = BlockProperties.POWER;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWER);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#HEAVY_WEIGHTED_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWER}</li>
     * </ul>
     */
    public static final class HEAVY_WEIGHTED_PRESSURE_PLATE {
        /**
         * Definition: "power" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> POWER = BlockProperties.POWER;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWER);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#COMPARATOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#MODE_COMPARATOR}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class COMPARATOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "mode" = ["compare", "subtract"]
         */
        public static final BlockProperty<String> MODE_COMPARATOR = BlockProperties.MODE_COMPARATOR;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, MODE_COMPARATOR, POWERED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DAYLIGHT_DETECTOR} can have:
     * <ul>
     * <li>{@link BlockProperties#INVERTED}</li>
     * <li>{@link BlockProperties#POWER}</li>
     * </ul>
     */
    public static final class DAYLIGHT_DETECTOR {
        /**
         * Definition: "inverted" = [true, false]
         */
        public static final BlockProperty<Boolean> INVERTED = BlockProperties.INVERTED;

        /**
         * Definition: "power" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> POWER = BlockProperties.POWER;

        static List<BlockProperty<?>> getProperties() {
            return List.of(INVERTED, POWER);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#HOPPER} can have:
     * <ul>
     * <li>{@link BlockProperties#ENABLED}</li>
     * <li>{@link BlockProperties#FACING_HOPPER}</li>
     * </ul>
     */
    public static final class HOPPER {
        /**
         * Definition: "enabled" = [true, false]
         */
        public static final BlockProperty<Boolean> ENABLED = BlockProperties.ENABLED;

        /**
         * Definition: "facing" = ["down", "north", "south", "west", "east"]
         */
        public static final BlockProperty<String> FACING_HOPPER = BlockProperties.FACING_HOPPER;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ENABLED, FACING_HOPPER);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#QUARTZ_PILLAR} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class QUARTZ_PILLAR {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#QUARTZ_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class QUARTZ_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#ACTIVATOR_RAIL} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#RAIL_SHAPE_STRAIGHT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ACTIVATOR_RAIL {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "shape" = ["north_south", "east_west", "ascending_east", "ascending_west", "ascending_north", "ascending_south"]
         */
        public static final BlockProperty<String> RAIL_SHAPE_STRAIGHT = BlockProperties.RAIL_SHAPE_STRAIGHT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED, RAIL_SHAPE_STRAIGHT, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DROPPER} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#TRIGGERED}</li>
     * </ul>
     */
    public static final class DROPPER {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "triggered" = [true, false]
         */
        public static final BlockProperty<Boolean> TRIGGERED = BlockProperties.TRIGGERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, TRIGGERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#WHITE_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class WHITE_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#ORANGE_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class ORANGE_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#MAGENTA_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class MAGENTA_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#LIGHT_BLUE_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class LIGHT_BLUE_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#YELLOW_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class YELLOW_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#LIME_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class LIME_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#PINK_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class PINK_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#GRAY_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class GRAY_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#LIGHT_GRAY_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class LIGHT_GRAY_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#CYAN_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class CYAN_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#PURPLE_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class PURPLE_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#BLUE_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class BLUE_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#BROWN_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class BROWN_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#GREEN_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class GREEN_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#RED_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class RED_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#BLACK_STAINED_GLASS_PANE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class BLACK_STAINED_GLASS_PANE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ACACIA_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DARK_OAK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#LIGHT} can have:
     * <ul>
     * <li>{@link BlockProperties#LEVEL}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class LIGHT {
        /**
         * Definition: "level" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> LEVEL = BlockProperties.LEVEL;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LEVEL, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#IRON_TRAPDOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class IRON_TRAPDOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, OPEN, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#PRISMARINE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class PRISMARINE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#PRISMARINE_BRICK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class PRISMARINE_BRICK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#DARK_PRISMARINE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DARK_PRISMARINE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#PRISMARINE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class PRISMARINE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#PRISMARINE_BRICK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class PRISMARINE_BRICK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DARK_PRISMARINE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DARK_PRISMARINE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#HAY_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class HAY_BLOCK {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SUNFLOWER} can have:
     * <ul>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * </ul>
     */
    public static final class SUNFLOWER {
        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOUBLE_BLOCK_HALF);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LILAC} can have:
     * <ul>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * </ul>
     */
    public static final class LILAC {
        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOUBLE_BLOCK_HALF);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ROSE_BUSH} can have:
     * <ul>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * </ul>
     */
    public static final class ROSE_BUSH {
        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOUBLE_BLOCK_HALF);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PEONY} can have:
     * <ul>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * </ul>
     */
    public static final class PEONY {
        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOUBLE_BLOCK_HALF);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#TALL_GRASS} can have:
     * <ul>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * </ul>
     */
    public static final class TALL_GRASS {
        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOUBLE_BLOCK_HALF);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LARGE_FERN} can have:
     * <ul>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * </ul>
     */
    public static final class LARGE_FERN {
        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOUBLE_BLOCK_HALF);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WHITE_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class WHITE_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ORANGE_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class ORANGE_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#MAGENTA_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class MAGENTA_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_BLUE_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class LIGHT_BLUE_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#YELLOW_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class YELLOW_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIME_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class LIME_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PINK_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class PINK_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GRAY_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class GRAY_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_GRAY_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class LIGHT_GRAY_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CYAN_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class CYAN_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PURPLE_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class PURPLE_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLUE_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class BLUE_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BROWN_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class BROWN_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GREEN_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class GREEN_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#RED_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class RED_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLACK_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * </ul>
     */
    public static final class BLACK_BANNER {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WHITE_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class WHITE_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ORANGE_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class ORANGE_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#MAGENTA_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class MAGENTA_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_BLUE_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class LIGHT_BLUE_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#YELLOW_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class YELLOW_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIME_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class LIME_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PINK_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class PINK_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GRAY_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class GRAY_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_GRAY_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class LIGHT_GRAY_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CYAN_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class CYAN_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PURPLE_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class PURPLE_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLUE_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class BLUE_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BROWN_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class BROWN_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GREEN_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class GREEN_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#RED_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class RED_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLACK_WALL_BANNER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class BLACK_WALL_BANNER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#RED_SANDSTONE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class RED_SANDSTONE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#OAK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class OAK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SPRUCE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BIRCH_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class JUNGLE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ACACIA_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DARK_OAK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#STONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class STONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SMOOTH_STONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SMOOTH_STONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SANDSTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SANDSTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#CUT_SANDSTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CUT_SANDSTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#PETRIFIED_OAK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class PETRIFIED_OAK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#COBBLESTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class COBBLESTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BRICK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BRICK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#STONE_BRICK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class STONE_BRICK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#NETHER_BRICK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class NETHER_BRICK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#QUARTZ_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class QUARTZ_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#RED_SANDSTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class RED_SANDSTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#CUT_RED_SANDSTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CUT_RED_SANDSTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#PURPUR_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class PURPUR_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_FENCE_GATE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#IN_WALL}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class SPRUCE_FENCE_GATE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "in_wall" = [true, false]
         */
        public static final BlockProperty<Boolean> IN_WALL = BlockProperties.IN_WALL;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, IN_WALL, OPEN, POWERED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_FENCE_GATE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#IN_WALL}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class BIRCH_FENCE_GATE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "in_wall" = [true, false]
         */
        public static final BlockProperty<Boolean> IN_WALL = BlockProperties.IN_WALL;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, IN_WALL, OPEN, POWERED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_FENCE_GATE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#IN_WALL}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class JUNGLE_FENCE_GATE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "in_wall" = [true, false]
         */
        public static final BlockProperty<Boolean> IN_WALL = BlockProperties.IN_WALL;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, IN_WALL, OPEN, POWERED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_FENCE_GATE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#IN_WALL}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class ACACIA_FENCE_GATE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "in_wall" = [true, false]
         */
        public static final BlockProperty<Boolean> IN_WALL = BlockProperties.IN_WALL;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, IN_WALL, OPEN, POWERED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_FENCE_GATE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#IN_WALL}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class DARK_OAK_FENCE_GATE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "in_wall" = [true, false]
         */
        public static final BlockProperty<Boolean> IN_WALL = BlockProperties.IN_WALL;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, IN_WALL, OPEN, POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_FENCE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class SPRUCE_FENCE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_FENCE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class BIRCH_FENCE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_FENCE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class JUNGLE_FENCE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_FENCE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class ACACIA_FENCE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_FENCE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class DARK_OAK_FENCE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#SPRUCE_DOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#DOOR_HINGE}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class SPRUCE_DOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "hinge" = ["left", "right"]
         */
        public static final BlockProperty<String> DOOR_HINGE = BlockProperties.DOOR_HINGE;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, DOOR_HINGE, OPEN, POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#BIRCH_DOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#DOOR_HINGE}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class BIRCH_DOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "hinge" = ["left", "right"]
         */
        public static final BlockProperty<String> DOOR_HINGE = BlockProperties.DOOR_HINGE;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, DOOR_HINGE, OPEN, POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#JUNGLE_DOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#DOOR_HINGE}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class JUNGLE_DOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "hinge" = ["left", "right"]
         */
        public static final BlockProperty<String> DOOR_HINGE = BlockProperties.DOOR_HINGE;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, DOOR_HINGE, OPEN, POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#ACACIA_DOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#DOOR_HINGE}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class ACACIA_DOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "hinge" = ["left", "right"]
         */
        public static final BlockProperty<String> DOOR_HINGE = BlockProperties.DOOR_HINGE;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, DOOR_HINGE, OPEN, POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#DARK_OAK_DOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#DOOR_HINGE}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class DARK_OAK_DOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "hinge" = ["left", "right"]
         */
        public static final BlockProperty<String> DOOR_HINGE = BlockProperties.DOOR_HINGE;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, DOOR_HINGE, OPEN, POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#END_ROD} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class END_ROD {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#CHORUS_PLANT} can have:
     * <ul>
     * <li>{@link BlockProperties#DOWN}</li>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class CHORUS_PLANT {
        /**
         * Definition: "down" = [true, false]
         */
        public static final BlockProperty<Boolean> DOWN = BlockProperties.DOWN;

        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DOWN, EAST, NORTH, SOUTH, UP, WEST);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CHORUS_FLOWER} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_5}</li>
     * </ul>
     */
    public static final class CHORUS_FLOWER {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5]
         */
        public static final BlockProperty<Integer> AGE_5 = BlockProperties.AGE_5;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_5);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PURPUR_PILLAR} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class PURPUR_PILLAR {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#PURPUR_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class PURPUR_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BEETROOTS} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_3}</li>
     * </ul>
     */
    public static final class BEETROOTS {
        /**
         * Definition: "age" = [0, 1, 2, 3]
         */
        public static final BlockProperty<Integer> AGE_3 = BlockProperties.AGE_3;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_3);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#REPEATING_COMMAND_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#CONDITIONAL}</li>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class REPEATING_COMMAND_BLOCK {
        /**
         * Definition: "conditional" = [true, false]
         */
        public static final BlockProperty<Boolean> CONDITIONAL = BlockProperties.CONDITIONAL;

        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CONDITIONAL, FACING);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#CHAIN_COMMAND_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#CONDITIONAL}</li>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class CHAIN_COMMAND_BLOCK {
        /**
         * Definition: "conditional" = [true, false]
         */
        public static final BlockProperty<Boolean> CONDITIONAL = BlockProperties.CONDITIONAL;

        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CONDITIONAL, FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#FROSTED_ICE} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_3}</li>
     * </ul>
     */
    public static final class FROSTED_ICE {
        /**
         * Definition: "age" = [0, 1, 2, 3]
         */
        public static final BlockProperty<Integer> AGE_3 = BlockProperties.AGE_3;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_3);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BONE_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class BONE_BLOCK {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#OBSERVER} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class OBSERVER {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WHITE_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class WHITE_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ORANGE_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class ORANGE_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#MAGENTA_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class MAGENTA_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_BLUE_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class LIGHT_BLUE_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#YELLOW_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class YELLOW_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIME_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class LIME_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PINK_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class PINK_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GRAY_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class GRAY_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_GRAY_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class LIGHT_GRAY_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CYAN_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class CYAN_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PURPLE_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class PURPLE_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLUE_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class BLUE_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BROWN_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class BROWN_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GREEN_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class GREEN_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#RED_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class RED_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLACK_SHULKER_BOX} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * </ul>
     */
    public static final class BLACK_SHULKER_BOX {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WHITE_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class WHITE_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ORANGE_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class ORANGE_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#MAGENTA_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class MAGENTA_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_BLUE_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class LIGHT_BLUE_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#YELLOW_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class YELLOW_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIME_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class LIME_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PINK_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class PINK_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GRAY_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class GRAY_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_GRAY_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class LIGHT_GRAY_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CYAN_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class CYAN_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PURPLE_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class PURPLE_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLUE_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class BLUE_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BROWN_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class BROWN_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GREEN_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class GREEN_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#RED_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class RED_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLACK_GLAZED_TERRACOTTA} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class BLACK_GLAZED_TERRACOTTA {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#KELP} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_25}</li>
     * </ul>
     */
    public static final class KELP {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
         */
        public static final BlockProperty<Integer> AGE_25 = BlockProperties.AGE_25;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_25);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#TURTLE_EGG} can have:
     * <ul>
     * <li>{@link BlockProperties#EGGS}</li>
     * <li>{@link BlockProperties#HATCH}</li>
     * </ul>
     */
    public static final class TURTLE_EGG {
        /**
         * Definition: "eggs" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> EGGS = BlockProperties.EGGS;

        /**
         * Definition: "hatch" = [0, 1, 2]
         */
        public static final BlockProperty<Integer> HATCH = BlockProperties.HATCH;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EGGS, HATCH);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_TUBE_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_TUBE_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_BRAIN_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_BRAIN_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_BUBBLE_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_BUBBLE_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_FIRE_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_FIRE_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_HORN_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_HORN_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#TUBE_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class TUBE_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BRAIN_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BRAIN_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BUBBLE_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BUBBLE_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#FIRE_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class FIRE_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#HORN_CORAL} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class HORN_CORAL {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_TUBE_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_TUBE_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_BRAIN_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_BRAIN_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_BUBBLE_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_BUBBLE_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_FIRE_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_FIRE_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEAD_HORN_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_HORN_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#TUBE_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class TUBE_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BRAIN_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BRAIN_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BUBBLE_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BUBBLE_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#FIRE_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class FIRE_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#HORN_CORAL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class HORN_CORAL_FAN {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DEAD_TUBE_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_TUBE_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DEAD_BRAIN_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_BRAIN_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DEAD_BUBBLE_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_BUBBLE_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DEAD_FIRE_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_FIRE_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DEAD_HORN_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEAD_HORN_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#TUBE_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class TUBE_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BRAIN_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BRAIN_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BUBBLE_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BUBBLE_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#FIRE_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class FIRE_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#HORN_CORAL_WALL_FAN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class HORN_CORAL_WALL_FAN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SEA_PICKLE} can have:
     * <ul>
     * <li>{@link BlockProperties#PICKLES}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SEA_PICKLE {
        /**
         * Definition: "pickles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> PICKLES = BlockProperties.PICKLES;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(PICKLES, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CONDUIT} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CONDUIT {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BAMBOO} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_1}</li>
     * <li>{@link BlockProperties#BAMBOO_LEAVES}</li>
     * <li>{@link BlockProperties#STAGE}</li>
     * </ul>
     */
    public static final class BAMBOO {
        /**
         * Definition: "age" = [0, 1]
         */
        public static final BlockProperty<Integer> AGE_1 = BlockProperties.AGE_1;

        /**
         * Definition: "leaves" = ["none", "small", "large"]
         */
        public static final BlockProperty<String> BAMBOO_LEAVES = BlockProperties.BAMBOO_LEAVES;

        /**
         * Definition: "stage" = [0, 1]
         */
        public static final BlockProperty<Integer> STAGE = BlockProperties.STAGE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_1, BAMBOO_LEAVES, STAGE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BUBBLE_COLUMN} can have:
     * <ul>
     * <li>{@link BlockProperties#DRAG}</li>
     * </ul>
     */
    public static final class BUBBLE_COLUMN {
        /**
         * Definition: "drag" = [true, false]
         */
        public static final BlockProperty<Boolean> DRAG = BlockProperties.DRAG;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DRAG);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_GRANITE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_GRANITE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#SMOOTH_RED_SANDSTONE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SMOOTH_RED_SANDSTONE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#MOSSY_STONE_BRICK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class MOSSY_STONE_BRICK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_DIORITE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_DIORITE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#MOSSY_COBBLESTONE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class MOSSY_COBBLESTONE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#END_STONE_BRICK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class END_STONE_BRICK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#STONE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class STONE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#SMOOTH_SANDSTONE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SMOOTH_SANDSTONE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#SMOOTH_QUARTZ_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SMOOTH_QUARTZ_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#GRANITE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class GRANITE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#ANDESITE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ANDESITE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#RED_NETHER_BRICK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class RED_NETHER_BRICK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_ANDESITE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_ANDESITE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#DIORITE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DIORITE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_GRANITE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_GRANITE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SMOOTH_RED_SANDSTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SMOOTH_RED_SANDSTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#MOSSY_STONE_BRICK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class MOSSY_STONE_BRICK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_DIORITE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_DIORITE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#MOSSY_COBBLESTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class MOSSY_COBBLESTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#END_STONE_BRICK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class END_STONE_BRICK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SMOOTH_SANDSTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SMOOTH_SANDSTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SMOOTH_QUARTZ_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SMOOTH_QUARTZ_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#GRANITE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class GRANITE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#ANDESITE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ANDESITE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#RED_NETHER_BRICK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class RED_NETHER_BRICK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_ANDESITE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_ANDESITE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DIORITE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DIORITE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#BRICK_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class BRICK_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#PRISMARINE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class PRISMARINE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#RED_SANDSTONE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class RED_SANDSTONE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#MOSSY_STONE_BRICK_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class MOSSY_STONE_BRICK_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#GRANITE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class GRANITE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#STONE_BRICK_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class STONE_BRICK_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#NETHER_BRICK_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class NETHER_BRICK_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#ANDESITE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class ANDESITE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#RED_NETHER_BRICK_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class RED_NETHER_BRICK_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#SANDSTONE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class SANDSTONE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#END_STONE_BRICK_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class END_STONE_BRICK_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#DIORITE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class DIORITE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#SCAFFOLDING} can have:
     * <ul>
     * <li>{@link BlockProperties#BOTTOM}</li>
     * <li>{@link BlockProperties#STABILITY_DISTANCE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SCAFFOLDING {
        /**
         * Definition: "bottom" = [true, false]
         */
        public static final BlockProperty<Boolean> BOTTOM = BlockProperties.BOTTOM;

        /**
         * Definition: "distance" = [0, 1, 2, 3, 4, 5, 6, 7]
         */
        public static final BlockProperty<Integer> STABILITY_DISTANCE = BlockProperties.STABILITY_DISTANCE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(BOTTOM, STABILITY_DISTANCE, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LOOM} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class LOOM {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BARREL} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * </ul>
     */
    public static final class BARREL {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, OPEN);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SMOKER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class SMOKER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, LIT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BLAST_FURNACE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class BLAST_FURNACE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, LIT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#GRINDSTONE} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class GRINDSTONE {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#LECTERN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HAS_BOOK}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class LECTERN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "has_book" = [true, false]
         */
        public static final BlockProperty<Boolean> HAS_BOOK = BlockProperties.HAS_BOOK;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HAS_BOOK, POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STONECUTTER} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * </ul>
     */
    public static final class STONECUTTER {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BELL} can have:
     * <ul>
     * <li>{@link BlockProperties#BELL_ATTACHMENT}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class BELL {
        /**
         * Definition: "attachment" = ["floor", "ceiling", "single_wall", "double_wall"]
         */
        public static final BlockProperty<String> BELL_ATTACHMENT = BlockProperties.BELL_ATTACHMENT;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(BELL_ATTACHMENT, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#LANTERN} can have:
     * <ul>
     * <li>{@link BlockProperties#HANGING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class LANTERN {
        /**
         * Definition: "hanging" = [true, false]
         */
        public static final BlockProperty<Boolean> HANGING = BlockProperties.HANGING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HANGING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SOUL_LANTERN} can have:
     * <ul>
     * <li>{@link BlockProperties#HANGING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SOUL_LANTERN {
        /**
         * Definition: "hanging" = [true, false]
         */
        public static final BlockProperty<Boolean> HANGING = BlockProperties.HANGING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HANGING, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#CAMPFIRE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#SIGNAL_FIRE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CAMPFIRE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "signal_fire" = [true, false]
         */
        public static final BlockProperty<Boolean> SIGNAL_FIRE = BlockProperties.SIGNAL_FIRE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, LIT, SIGNAL_FIRE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#SOUL_CAMPFIRE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#SIGNAL_FIRE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SOUL_CAMPFIRE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "signal_fire" = [true, false]
         */
        public static final BlockProperty<Boolean> SIGNAL_FIRE = BlockProperties.SIGNAL_FIRE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, LIT, SIGNAL_FIRE, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#SWEET_BERRY_BUSH} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_3}</li>
     * </ul>
     */
    public static final class SWEET_BERRY_BUSH {
        /**
         * Definition: "age" = [0, 1, 2, 3]
         */
        public static final BlockProperty<Integer> AGE_3 = BlockProperties.AGE_3;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_3);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WARPED_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class WARPED_STEM {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_WARPED_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_WARPED_STEM {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WARPED_HYPHAE} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class WARPED_HYPHAE {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_WARPED_HYPHAE} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_WARPED_HYPHAE {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CRIMSON_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class CRIMSON_STEM {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_CRIMSON_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_CRIMSON_STEM {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CRIMSON_HYPHAE} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class CRIMSON_HYPHAE {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRIPPED_CRIMSON_HYPHAE} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class STRIPPED_CRIMSON_HYPHAE {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WEEPING_VINES} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_25}</li>
     * </ul>
     */
    public static final class WEEPING_VINES {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
         */
        public static final BlockProperty<Integer> AGE_25 = BlockProperties.AGE_25;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_25);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#TWISTING_VINES} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_25}</li>
     * </ul>
     */
    public static final class TWISTING_VINES {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
         */
        public static final BlockProperty<Integer> AGE_25 = BlockProperties.AGE_25;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_25);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#CRIMSON_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CRIMSON_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#WARPED_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WARPED_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CRIMSON_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class CRIMSON_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WARPED_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class WARPED_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#CRIMSON_FENCE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class CRIMSON_FENCE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#WARPED_FENCE} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST}</li>
     * <li>{@link BlockProperties#NORTH}</li>
     * <li>{@link BlockProperties#SOUTH}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST}</li>
     * </ul>
     */
    public static final class WARPED_FENCE {
        /**
         * Definition: "east" = [true, false]
         */
        public static final BlockProperty<Boolean> EAST = BlockProperties.EAST;

        /**
         * Definition: "north" = [true, false]
         */
        public static final BlockProperty<Boolean> NORTH = BlockProperties.NORTH;

        /**
         * Definition: "south" = [true, false]
         */
        public static final BlockProperty<Boolean> SOUTH = BlockProperties.SOUTH;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = [true, false]
         */
        public static final BlockProperty<Boolean> WEST = BlockProperties.WEST;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST, NORTH, SOUTH, WATERLOGGED, WEST);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#CRIMSON_TRAPDOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CRIMSON_TRAPDOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, OPEN, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#WARPED_TRAPDOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WARPED_TRAPDOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, OPEN, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#CRIMSON_FENCE_GATE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#IN_WALL}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class CRIMSON_FENCE_GATE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "in_wall" = [true, false]
         */
        public static final BlockProperty<Boolean> IN_WALL = BlockProperties.IN_WALL;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, IN_WALL, OPEN, POWERED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#WARPED_FENCE_GATE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#IN_WALL}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class WARPED_FENCE_GATE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "in_wall" = [true, false]
         */
        public static final BlockProperty<Boolean> IN_WALL = BlockProperties.IN_WALL;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, IN_WALL, OPEN, POWERED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#CRIMSON_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CRIMSON_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#WARPED_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WARPED_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#CRIMSON_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class CRIMSON_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#WARPED_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class WARPED_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#CRIMSON_DOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#DOOR_HINGE}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class CRIMSON_DOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "hinge" = ["left", "right"]
         */
        public static final BlockProperty<String> DOOR_HINGE = BlockProperties.DOOR_HINGE;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, DOOR_HINGE, OPEN, POWERED);
        }
    }

    /**
     * Represents the 5 {@link BlockProperty properties} that {@link BlockConstants#WARPED_DOOR} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#DOOR_HINGE}</li>
     * <li>{@link BlockProperties#OPEN}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class WARPED_DOOR {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "hinge" = ["left", "right"]
         */
        public static final BlockProperty<String> DOOR_HINGE = BlockProperties.DOOR_HINGE;

        /**
         * Definition: "open" = [true, false]
         */
        public static final BlockProperty<Boolean> OPEN = BlockProperties.OPEN;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, DOOR_HINGE, OPEN, POWERED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#CRIMSON_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CRIMSON_SIGN {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#WARPED_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#ROTATION_16}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WARPED_SIGN {
        /**
         * Definition: "rotation" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> ROTATION_16 = BlockProperties.ROTATION_16;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ROTATION_16, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#CRIMSON_WALL_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CRIMSON_WALL_SIGN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#WARPED_WALL_SIGN} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WARPED_WALL_SIGN {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#STRUCTURE_BLOCK} can have:
     * <ul>
     * <li>{@link BlockProperties#STRUCTUREBLOCK_MODE}</li>
     * </ul>
     */
    public static final class STRUCTURE_BLOCK {
        /**
         * Definition: "mode" = ["save", "load", "corner", "data"]
         */
        public static final BlockProperty<String> STRUCTUREBLOCK_MODE = BlockProperties.STRUCTUREBLOCK_MODE;

        static List<BlockProperty<?>> getProperties() {
            return List.of(STRUCTUREBLOCK_MODE);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#JIGSAW} can have:
     * <ul>
     * <li>{@link BlockProperties#ORIENTATION}</li>
     * </ul>
     */
    public static final class JIGSAW {
        /**
         * Definition: "orientation" = ["down_east", "down_north", "down_south", "down_west", "up_east", "up_north", "up_south", "up_west", "west_up", "east_up", "north_up", "south_up"]
         */
        public static final BlockProperty<String> ORIENTATION = BlockProperties.ORIENTATION;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ORIENTATION);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#COMPOSTER} can have:
     * <ul>
     * <li>{@link BlockProperties#LEVEL_COMPOSTER}</li>
     * </ul>
     */
    public static final class COMPOSTER {
        /**
         * Definition: "level" = [0, 1, 2, 3, 4, 5, 6, 7, 8]
         */
        public static final BlockProperty<Integer> LEVEL_COMPOSTER = BlockProperties.LEVEL_COMPOSTER;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LEVEL_COMPOSTER);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#TARGET} can have:
     * <ul>
     * <li>{@link BlockProperties#POWER}</li>
     * </ul>
     */
    public static final class TARGET {
        /**
         * Definition: "power" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> POWER = BlockProperties.POWER;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWER);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BEE_NEST} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#LEVEL_HONEY}</li>
     * </ul>
     */
    public static final class BEE_NEST {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "honey_level" = [0, 1, 2, 3, 4, 5]
         */
        public static final BlockProperty<Integer> LEVEL_HONEY = BlockProperties.LEVEL_HONEY;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, LEVEL_HONEY);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BEEHIVE} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#LEVEL_HONEY}</li>
     * </ul>
     */
    public static final class BEEHIVE {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "honey_level" = [0, 1, 2, 3, 4, 5]
         */
        public static final BlockProperty<Integer> LEVEL_HONEY = BlockProperties.LEVEL_HONEY;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, LEVEL_HONEY);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#RESPAWN_ANCHOR} can have:
     * <ul>
     * <li>{@link BlockProperties#RESPAWN_ANCHOR_CHARGES}</li>
     * </ul>
     */
    public static final class RESPAWN_ANCHOR {
        /**
         * Definition: "charges" = [0, 1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> RESPAWN_ANCHOR_CHARGES = BlockProperties.RESPAWN_ANCHOR_CHARGES;

        static List<BlockProperty<?>> getProperties() {
            return List.of(RESPAWN_ANCHOR_CHARGES);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#BLACKSTONE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BLACKSTONE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#BLACKSTONE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class BLACKSTONE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BLACKSTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BLACKSTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_BLACKSTONE_BRICK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_BLACKSTONE_BRICK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_BLACKSTONE_BRICK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_BLACKSTONE_BRICK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_BLACKSTONE_BRICK_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class POLISHED_BLACKSTONE_BRICK_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_BLACKSTONE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_BLACKSTONE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_BLACKSTONE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_BLACKSTONE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#POLISHED_BLACKSTONE_PRESSURE_PLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class POLISHED_BLACKSTONE_PRESSURE_PLATE {
        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWERED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_BLACKSTONE_BUTTON} can have:
     * <ul>
     * <li>{@link BlockProperties#ATTACH_FACE}</li>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * </ul>
     */
    public static final class POLISHED_BLACKSTONE_BUTTON {
        /**
         * Definition: "face" = ["floor", "wall", "ceiling"]
         */
        public static final BlockProperty<String> ATTACH_FACE = BlockProperties.ATTACH_FACE;

        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(ATTACH_FACE, HORIZONTAL_FACING, POWERED);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_BLACKSTONE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class POLISHED_BLACKSTONE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#WHITE_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WHITE_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#ORANGE_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class ORANGE_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#MAGENTA_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class MAGENTA_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#LIGHT_BLUE_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class LIGHT_BLUE_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#YELLOW_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class YELLOW_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#LIME_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class LIME_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#PINK_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class PINK_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#GRAY_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class GRAY_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#LIGHT_GRAY_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class LIGHT_GRAY_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#CYAN_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CYAN_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#PURPLE_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class PURPLE_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BLUE_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BLUE_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BROWN_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BROWN_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#GREEN_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class GREEN_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#RED_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class RED_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BLACK_CANDLE} can have:
     * <ul>
     * <li>{@link BlockProperties#CANDLES}</li>
     * <li>{@link BlockProperties#LIT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BLACK_CANDLE {
        /**
         * Definition: "candles" = [1, 2, 3, 4]
         */
        public static final BlockProperty<Integer> CANDLES = BlockProperties.CANDLES;

        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(CANDLES, LIT, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#WHITE_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class WHITE_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#ORANGE_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class ORANGE_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#MAGENTA_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class MAGENTA_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_BLUE_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class LIGHT_BLUE_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#YELLOW_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class YELLOW_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIME_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class LIME_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PINK_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class PINK_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GRAY_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class GRAY_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#LIGHT_GRAY_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class LIGHT_GRAY_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CYAN_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class CYAN_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#PURPLE_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class PURPLE_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLUE_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class BLUE_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BROWN_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class BROWN_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#GREEN_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class GREEN_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#RED_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class RED_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#BLACK_CANDLE_CAKE} can have:
     * <ul>
     * <li>{@link BlockProperties#LIT}</li>
     * </ul>
     */
    public static final class BLACK_CANDLE_CAKE {
        /**
         * Definition: "lit" = [true, false]
         */
        public static final BlockProperty<Boolean> LIT = BlockProperties.LIT;

        static List<BlockProperty<?>> getProperties() {
            return List.of(LIT);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#AMETHYST_CLUSTER} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class AMETHYST_CLUSTER {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#LARGE_AMETHYST_BUD} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class LARGE_AMETHYST_BUD {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#MEDIUM_AMETHYST_BUD} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class MEDIUM_AMETHYST_BUD {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#SMALL_AMETHYST_BUD} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SMALL_AMETHYST_BUD {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#SCULK_SENSOR} can have:
     * <ul>
     * <li>{@link BlockProperties#POWER}</li>
     * <li>{@link BlockProperties#SCULK_SENSOR_PHASE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SCULK_SENSOR {
        /**
         * Definition: "power" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
         */
        public static final BlockProperty<Integer> POWER = BlockProperties.POWER;

        /**
         * Definition: "sculk_sensor_phase" = ["inactive", "active", "cooldown"]
         */
        public static final BlockProperty<String> SCULK_SENSOR_PHASE = BlockProperties.SCULK_SENSOR_PHASE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(POWER, SCULK_SENSOR_PHASE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#OXIDIZED_CUT_COPPER_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class OXIDIZED_CUT_COPPER_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#WEATHERED_CUT_COPPER_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WEATHERED_CUT_COPPER_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#EXPOSED_CUT_COPPER_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class EXPOSED_CUT_COPPER_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#CUT_COPPER_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CUT_COPPER_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#OXIDIZED_CUT_COPPER_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class OXIDIZED_CUT_COPPER_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#WEATHERED_CUT_COPPER_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WEATHERED_CUT_COPPER_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#EXPOSED_CUT_COPPER_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class EXPOSED_CUT_COPPER_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#CUT_COPPER_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class CUT_COPPER_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#WAXED_OXIDIZED_CUT_COPPER_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WAXED_OXIDIZED_CUT_COPPER_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#WAXED_WEATHERED_CUT_COPPER_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WAXED_WEATHERED_CUT_COPPER_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#WAXED_EXPOSED_CUT_COPPER_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WAXED_EXPOSED_CUT_COPPER_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#WAXED_CUT_COPPER_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WAXED_CUT_COPPER_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#WAXED_OXIDIZED_CUT_COPPER_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WAXED_OXIDIZED_CUT_COPPER_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#WAXED_WEATHERED_CUT_COPPER_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WAXED_WEATHERED_CUT_COPPER_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#WAXED_EXPOSED_CUT_COPPER_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WAXED_EXPOSED_CUT_COPPER_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#WAXED_CUT_COPPER_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class WAXED_CUT_COPPER_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#LIGHTNING_ROD} can have:
     * <ul>
     * <li>{@link BlockProperties#FACING}</li>
     * <li>{@link BlockProperties#POWERED}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class LIGHTNING_ROD {
        /**
         * Definition: "facing" = ["north", "east", "south", "west", "up", "down"]
         */
        public static final BlockProperty<String> FACING = BlockProperties.FACING;

        /**
         * Definition: "powered" = [true, false]
         */
        public static final BlockProperty<Boolean> POWERED = BlockProperties.POWERED;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(FACING, POWERED, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#POINTED_DRIPSTONE} can have:
     * <ul>
     * <li>{@link BlockProperties#DRIPSTONE_THICKNESS}</li>
     * <li>{@link BlockProperties#VERTICAL_DIRECTION}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POINTED_DRIPSTONE {
        /**
         * Definition: "thickness" = ["tip_merge", "tip", "frustum", "middle", "base"]
         */
        public static final BlockProperty<String> DRIPSTONE_THICKNESS = BlockProperties.DRIPSTONE_THICKNESS;

        /**
         * Definition: "vertical_direction" = ["up", "down"]
         */
        public static final BlockProperty<String> VERTICAL_DIRECTION = BlockProperties.VERTICAL_DIRECTION;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(DRIPSTONE_THICKNESS, VERTICAL_DIRECTION, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#CAVE_VINES} can have:
     * <ul>
     * <li>{@link BlockProperties#AGE_25}</li>
     * <li>{@link BlockProperties#BERRIES}</li>
     * </ul>
     */
    public static final class CAVE_VINES {
        /**
         * Definition: "age" = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
         */
        public static final BlockProperty<Integer> AGE_25 = BlockProperties.AGE_25;

        /**
         * Definition: "berries" = [true, false]
         */
        public static final BlockProperty<Boolean> BERRIES = BlockProperties.BERRIES;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AGE_25, BERRIES);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#CAVE_VINES_PLANT} can have:
     * <ul>
     * <li>{@link BlockProperties#BERRIES}</li>
     * </ul>
     */
    public static final class CAVE_VINES_PLANT {
        /**
         * Definition: "berries" = [true, false]
         */
        public static final BlockProperty<Boolean> BERRIES = BlockProperties.BERRIES;

        static List<BlockProperty<?>> getProperties() {
            return List.of(BERRIES);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#BIG_DRIPLEAF} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#TILT}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BIG_DRIPLEAF {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "tilt" = ["none", "unstable", "partial", "full"]
         */
        public static final BlockProperty<String> TILT = BlockProperties.TILT;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, TILT, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#BIG_DRIPLEAF_STEM} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class BIG_DRIPLEAF_STEM {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, WATERLOGGED);
        }
    }

    /**
     * Represents the 3 {@link BlockProperty properties} that {@link BlockConstants#SMALL_DRIPLEAF} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#DOUBLE_BLOCK_HALF}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class SMALL_DRIPLEAF {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["upper", "lower"]
         */
        public static final BlockProperty<String> DOUBLE_BLOCK_HALF = BlockProperties.DOUBLE_BLOCK_HALF;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, DOUBLE_BLOCK_HALF, WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#HANGING_ROOTS} can have:
     * <ul>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class HANGING_ROOTS {
        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(WATERLOGGED);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#DEEPSLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class DEEPSLATE {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#COBBLED_DEEPSLATE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class COBBLED_DEEPSLATE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#COBBLED_DEEPSLATE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class COBBLED_DEEPSLATE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#COBBLED_DEEPSLATE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class COBBLED_DEEPSLATE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_DEEPSLATE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_DEEPSLATE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_DEEPSLATE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class POLISHED_DEEPSLATE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#POLISHED_DEEPSLATE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class POLISHED_DEEPSLATE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#DEEPSLATE_TILE_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEEPSLATE_TILE_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DEEPSLATE_TILE_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEEPSLATE_TILE_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#DEEPSLATE_TILE_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class DEEPSLATE_TILE_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 4 {@link BlockProperty properties} that {@link BlockConstants#DEEPSLATE_BRICK_STAIRS} can have:
     * <ul>
     * <li>{@link BlockProperties#HORIZONTAL_FACING}</li>
     * <li>{@link BlockProperties#HALF}</li>
     * <li>{@link BlockProperties#STAIRS_SHAPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEEPSLATE_BRICK_STAIRS {
        /**
         * Definition: "facing" = ["north", "south", "west", "east"]
         */
        public static final BlockProperty<String> HORIZONTAL_FACING = BlockProperties.HORIZONTAL_FACING;

        /**
         * Definition: "half" = ["top", "bottom"]
         */
        public static final BlockProperty<String> HALF = BlockProperties.HALF;

        /**
         * Definition: "shape" = ["straight", "inner_left", "inner_right", "outer_left", "outer_right"]
         */
        public static final BlockProperty<String> STAIRS_SHAPE = BlockProperties.STAIRS_SHAPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(HORIZONTAL_FACING, HALF, STAIRS_SHAPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 2 {@link BlockProperty properties} that {@link BlockConstants#DEEPSLATE_BRICK_SLAB} can have:
     * <ul>
     * <li>{@link BlockProperties#SLAB_TYPE}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * </ul>
     */
    public static final class DEEPSLATE_BRICK_SLAB {
        /**
         * Definition: "type" = ["top", "bottom", "double"]
         */
        public static final BlockProperty<String> SLAB_TYPE = BlockProperties.SLAB_TYPE;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        static List<BlockProperty<?>> getProperties() {
            return List.of(SLAB_TYPE, WATERLOGGED);
        }
    }

    /**
     * Represents the 6 {@link BlockProperty properties} that {@link BlockConstants#DEEPSLATE_BRICK_WALL} can have:
     * <ul>
     * <li>{@link BlockProperties#EAST_WALL}</li>
     * <li>{@link BlockProperties#NORTH_WALL}</li>
     * <li>{@link BlockProperties#SOUTH_WALL}</li>
     * <li>{@link BlockProperties#UP}</li>
     * <li>{@link BlockProperties#WATERLOGGED}</li>
     * <li>{@link BlockProperties#WEST_WALL}</li>
     * </ul>
     */
    public static final class DEEPSLATE_BRICK_WALL {
        /**
         * Definition: "east" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> EAST_WALL = BlockProperties.EAST_WALL;

        /**
         * Definition: "north" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> NORTH_WALL = BlockProperties.NORTH_WALL;

        /**
         * Definition: "south" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> SOUTH_WALL = BlockProperties.SOUTH_WALL;

        /**
         * Definition: "up" = [true, false]
         */
        public static final BlockProperty<Boolean> UP = BlockProperties.UP;

        /**
         * Definition: "waterlogged" = [true, false]
         */
        public static final BlockProperty<Boolean> WATERLOGGED = BlockProperties.WATERLOGGED;

        /**
         * Definition: "west" = ["none", "low", "tall"]
         */
        public static final BlockProperty<String> WEST_WALL = BlockProperties.WEST_WALL;

        static List<BlockProperty<?>> getProperties() {
            return List.of(EAST_WALL, NORTH_WALL, SOUTH_WALL, UP, WATERLOGGED, WEST_WALL);
        }
    }

    /**
     * Represents the 1 {@link BlockProperty property} that {@link BlockConstants#INFESTED_DEEPSLATE} can have:
     * <ul>
     * <li>{@link BlockProperties#AXIS}</li>
     * </ul>
     */
    public static final class INFESTED_DEEPSLATE {
        /**
         * Definition: "axis" = ["x", "y", "z"]
         */
        public static final BlockProperty<String> AXIS = BlockProperties.AXIS;

        static List<BlockProperty<?>> getProperties() {
            return List.of(AXIS);
        }
    }
}
