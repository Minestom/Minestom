// AUTOGENERATED by net.minestom.codegen.RegistriesGenerator
package net.minestom.server.registry

import net.kyori.adventure.key.Key
import net.minestom.server.item.Material
import net.minestom.server.item.MaterialImpl
import net.minestom.server.item.Enchantment
import net.minestom.server.item.EnchantmentImpl
import net.minestom.server.utils.NamespaceID
import net.kyori.adventure.key.Keyed
import net.minestom.server.registry.Registries
import net.minestom.server.fluid.Fluid
import net.minestom.server.sound.SoundEvent
import net.minestom.server.sound.SoundEventImpl
import net.minestom.server.entity.EntityType
import net.minestom.server.entity.EntityTypeImpl
import net.minestom.server.potion.PotionType
import net.minestom.server.potion.PotionTypeImpl
import net.minestom.server.potion.PotionEffect
import net.minestom.server.potion.PotionEffectImpl
import net.minestom.server.particle.ParticleImpl
import net.minestom.server.statistic.StatisticType
import net.minestom.server.statistic.StatisticTypeImpl
import java.util.HashMap

/**
 * AUTOGENERATED
 */
object Registries {
    /**
     * Should only be used for internal code, please use the get* methods.
     */
    @Deprecated("")
    val fluids = HashMap<NamespaceID?, Fluid>()

    /**
     * Returns the corresponding Fluid matching the given id. Returns 'EMPTY' if none match.
     */
    fun getFluid(id: String?): Fluid {
        return getFluid(NamespaceID.from(id!!))
    }

    /**
     * Returns the corresponding Fluid matching the given id. Returns 'EMPTY' if none match.
     */
    fun getFluid(id: NamespaceID?): Fluid {
        return fluids.getOrDefault(id, Fluid.EMPTY)
    }

    /**
     * Returns the corresponding Fluid matching the given key. Returns 'EMPTY' if none match.
     */
    fun getFluid(key: Key?): Fluid {
        return getFluid(NamespaceID.from(key!!))
    }
}