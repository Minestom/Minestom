plugins {
    id("minestom.java-library")
    id("minestom.publishing")
    alias(libs.plugins.blossom)

    alias(libs.plugins.nmcp.aggregation)
}

sourceSets {
    main {
        java {
            srcDir(file("src/main/java"))
            srcDir(file("src/autogenerated/java"))
        }
        blossom {
            javaSources {
                property("COMMIT", System.getenv("GITHUB_SHA") ?: "LOCAL")
                property("BRANCH", System.getenv("GITHUB_REF") ?: "LOCAL")
                property("GROUP", project.group.toString())
                property("ARTIFACT", project.name)
                property("VERSION", project.version.toString())
            }
        }
    }
}

tasks.register<Task>("determineMinecraftVersion") {
    outputs.upToDateWhen { false } // Never cache

    doLast {
        val minestomDataVersion = libs.minestomData.get().version
        if (minestomDataVersion == null || "-" !in minestomDataVersion)
            throw IllegalStateException("Unable to determine Minecraft version from minestomData dependency")
        println(minestomDataVersion.split("-")[0])
    }
}

dependencies {
    // Core dependencies
    api(libs.bundles.adventure)
    implementation(libs.slf4j)
    implementation(libs.minestomData)

    // Performance/data structures
    api(libs.fastutil)
    implementation(libs.bundles.flare)
    api(libs.gson)
    implementation(libs.jcTools)

    testImplementation(project(":testing"))
}

tasks.jar {
    manifest {
        attributes("Automatic-Module-Name" to "net.minestom.server")
    }
}

// Publishing configuration below

nmcpAggregation {
    centralPortal {
        username = System.getenv("SONATYPE_USERNAME")
        password = System.getenv("SONATYPE_PASSWORD")
        publishingType = "AUTOMATIC"
    }
}

dependencies {
    nmcpAggregation(rootProject)
    nmcpAggregation(project(":testing"))
}
