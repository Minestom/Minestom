package net.minestom.codegen;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.palantir.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Path;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

public class GenericEnumGenerator implements MinestomCodeGenerator {
    private final String packageName;
    private final String className;
    private final InputStream entriesFile;
    private final Path outputFolder;

    private boolean isPackagePrivate = false;

    public GenericEnumGenerator(
            String packageName, String className,
            InputStream entriesFile, Path outputFolder
    ) {
        this.packageName = Objects.requireNonNull(packageName, "Package name cannot be null");
        this.className = Objects.requireNonNull(className, "Class name cannot be null");
        this.entriesFile = Objects.requireNonNull(entriesFile, "Entries file cannot be null");
        this.outputFolder = Objects.requireNonNull(outputFolder, "Output folder cannot be null");
    }

    public GenericEnumGenerator packagePrivate() {
        this.isPackagePrivate = true;
        return this;
    }

    @Override
    public Path outputFolder() {
        return outputFolder;
    }

    @Override
    public void generate() {
        ensureDirectory(outputFolder);

        // Important classes we use alot
        JsonArray entryList = GSON.fromJson(new InputStreamReader(entriesFile), JsonArray.class);
        ClassName entryCN = ClassName.get(packageName, className);
        Modifier[] modifiers = isPackagePrivate ? new Modifier[0] : new Modifier[]{Modifier.PUBLIC};
        TypeSpec.Builder entryEnum = TypeSpec.enumBuilder(entryCN)
                .addSuperinterface(
                        ParameterizedTypeName.get(
                                ClassName.get("net.minestom.server.registry", "StaticProtocolObject"),
                                entryCN
                        )
                )
                .addModifiers(modifiers).addJavadoc("AUTOGENERATED by " + getClass().getSimpleName());
        ClassName keyCN = ClassName.get("net.kyori.adventure.key", "Key");

        ClassName networkBufferCN = ClassName.get("net.minestom.server.network", "NetworkBuffer");
        ParameterizedTypeName networkBufferTypeCN = ParameterizedTypeName.get(networkBufferCN.nestedClass("Type"), entryCN);
        ClassName codecRawCN = ClassName.get("net.minestom.server.codec", "Codec");
        ParameterizedTypeName codecCN = ParameterizedTypeName.get(codecRawCN, entryCN);

        // Fields
        entryEnum.addFields(
                List.of(
                        FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(Map.class), keyCN, entryCN), "BY_KEY", Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL)
                                .initializer("$T.stream(values()).collect($T.toUnmodifiableMap($T::key, $T.identity()))", Arrays.class, Collectors.class, entryCN, Function.class)
                                .build(),
                        FieldSpec.builder(networkBufferTypeCN, "NETWORK_TYPE", Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                                .initializer("$T.Enum($T.class)", networkBufferCN, entryCN)
                                .build(),
                        FieldSpec.builder(codecCN, "CODEC", Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                                .initializer("$T.KEY.transform(BY_KEY::get, $T::key)", codecRawCN, entryCN)
                                .build(),
                        FieldSpec.builder(keyCN, "key", Modifier.PRIVATE, Modifier.FINAL).build()
                )
        );

        // Methods
        entryEnum.addMethods(
                List.of(
                        // Constructor
                        MethodSpec.constructorBuilder()
                                .addParameter(ParameterSpec.builder(String.class, "key").build())
                                .addStatement("this.key = $T.key(key)", keyCN)
                                .build(),
                        MethodSpec.methodBuilder("key")
                                .addModifiers(Modifier.PUBLIC)
                                .addAnnotation(Override.class)
                                .returns(keyCN)
                                .addStatement("return this.key")
                                .build(),
                        MethodSpec.methodBuilder("id")
                                .addModifiers(Modifier.PUBLIC)
                                .returns(TypeName.INT)
                                .addAnnotation(Override.class)
                                .addStatement("return this.ordinal()")
                                .build()
                )
        );

        // Use data
        for (JsonObject entryObject : StreamSupport.stream(entryList.spliterator(), true).map(JsonElement::getAsJsonObject).sorted(Comparator.comparingInt(o -> o.get("id").getAsInt())).toList()) {
            final String entryName = entryObject.get("name").getAsString();
            final String namespaceString = namespaceShort(entryName);
            entryEnum.addEnumConstant(toConstant(entryName), TypeSpec.anonymousClassBuilder(
                    "$S", namespaceString
            ).build());
        }

        // Write files
        writeFiles(JavaFile.builder(packageName, entryEnum.build())
                .indent("    ")
                .skipJavaLangImports(true)
                .build()
        );
    }
}
