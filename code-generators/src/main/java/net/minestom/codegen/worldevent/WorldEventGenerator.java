package net.minestom.codegen.worldevent;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.squareup.javapoet.*;
import net.minestom.codegen.MinestomCodeGenerator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.List;
import java.util.stream.StreamSupport;

public class WorldEventGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(WorldEventGenerator.class);

    private final String packageName;
    private final String worldEventClassName;
    private final InputStream entriesFile;
    private final File outputFolder;

    public WorldEventGenerator(
            @NotNull String packageName, @NotNull String worldEventClassName,
            @Nullable InputStream entriesFile, @NotNull File outputFolder
    ) {
        this.packageName = packageName;
        this.worldEventClassName = worldEventClassName;
        this.entriesFile = entriesFile;
        this.outputFolder = outputFolder;
    }

    public void generate() {
        if (entriesFile == null) {
            LOGGER.error("Failed to find entries file.");
            LOGGER.error("Stopped code generation for {}.", worldEventClassName);
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }

        // Important classes we use alot
        JsonArray entryList = GSON.fromJson(new InputStreamReader(entriesFile), JsonArray.class);
        ClassName entryCN = ClassName.get(packageName, worldEventClassName);
        TypeSpec.Builder entryEnum = TypeSpec.enumBuilder(entryCN)
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc("AUTOGENERATED by " + getClass().getSimpleName());
        ClassName networkBufferCN = ClassName.get("net.minestom.server.network", "NetworkBuffer");
        ParameterizedTypeName networkBufferTypeCN = ParameterizedTypeName.get(networkBufferCN.nestedClass("Type"), entryCN);

        // Fields
        entryEnum.addFields(
                List.of(
                        FieldSpec.builder(networkBufferTypeCN, "NETWORK_TYPE", Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                                .initializer("$T.VAR_INT.transform($T::fromId, $T::id)", networkBufferCN, entryCN, entryCN)
                                .build(),
                        FieldSpec.builder(TypeName.INT, "eventId", Modifier.PRIVATE, Modifier.FINAL).build(),
                        FieldSpec.builder(ArrayTypeName.of(entryCN), "VALUES")
                                .addModifiers(Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL)
                                .initializer("values()")
                                .build()
                )
        );

        // Methods
        entryEnum.addMethods(
                List.of(
                        // Constructor
                        MethodSpec.constructorBuilder()
                                .addParameter(ParameterSpec.builder(int.class, "eventId").build())
                                .addStatement("this.eventId = eventId")
                                .build(),
                        MethodSpec.methodBuilder("id")
                                .addModifiers(Modifier.PUBLIC)
                                .returns(TypeName.INT)
                                .addStatement("return this.eventId")
                                .build(),
                        MethodSpec.methodBuilder("fromId")
                                .addParameter(ParameterSpec.builder(int.class, "id").build())
                                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                                .beginControlFlow("for ($T event : VALUES)", entryCN)
                                .beginControlFlow("if (event.id() == id)")
                                .addStatement("return event")
                                .endControlFlow()
                                .endControlFlow()
                                .addStatement("return null")
                                .returns(entryCN)
                                .addAnnotation(Nullable.class)
                                .build()
                )
        );

        // Use data
        for (JsonObject entryObject : StreamSupport.stream(entryList.spliterator(), true).map(JsonElement::getAsJsonObject).sorted(Comparator.comparingInt(o -> o.get("id").getAsInt())).toList()) {
            String entryName = entryObject.get("name").getAsString().toUpperCase();
            int id = entryObject.get("id").getAsInt();
            entryEnum.addEnumConstant(entryName, TypeSpec.anonymousClassBuilder("$L", id).build());
        }

        // Write files to outputFolder
        writeFiles(
                List.of(
                        JavaFile.builder(packageName, entryEnum.build())
                                .indent("    ")
                                .skipJavaLangImports(true)
                                .build()
                ),
                outputFolder
        );
    }
}
