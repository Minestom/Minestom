package net.minestom.codegen;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.palantir.javapoet.ClassName;
import com.palantir.javapoet.CodeBlock;
import com.palantir.javapoet.JavaFile;

import javax.lang.model.SourceVersion;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Locale;
import java.util.Objects;

public interface MinestomCodeGenerator {
    Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();

    default String toConstant(String namespace) {
        String constant = namespaceShort(namespace)
                .replaceFirst("brigadier:", "") // Not implicit, do not put into namespaceShort
                .replace(".", "_")
                .toUpperCase(Locale.ROOT);
        if (!SourceVersion.isName(constant)) {
            constant = "_" + constant;
        }
        return constant;
    }

    default String namespaceShort(String namespace) {
        return namespace.replaceFirst("minecraft:", "");
    }

    default void ensureDirectory(Path directory) throws IllegalStateException {
        Objects.requireNonNull(directory, "Directory is null");
        if (Files.isDirectory(directory)) return;
        try {
            Files.createDirectories(directory);
        } catch (IOException e) {
            throw new IllegalStateException("Failed to create folder for %s".formatted(directory), e);
        }
    }

    default void writeFiles(JavaFile... files) {
        Objects.requireNonNull(files, "File list cannot be null");
        final Path to = outputFolder();
        Objects.requireNonNull(to, "Output folder cannot be null");
        for (JavaFile javaFile : files) {
            try {
                javaFile.writeTo(to);
            } catch (IOException e) {
                throw new IllegalStateException("Failed to write all the output!", e);
            }
        }
    }

    default CodeBlock generateJavadoc(ClassName forImpl) {
        Objects.requireNonNull(forImpl, "for cannot be null");
        return CodeBlock.builder()
                .add("This class contains all the generated constants for {@link $T}\n<br>\n", forImpl)
                .add("Code autogenerated, do not edit!")
                .build();
    }

    Path outputFolder();

    default void generate() {
        throw new UnsupportedOperationException("This generator `%s` does not implement the generate method".formatted(getClass().getSimpleName()));
    }
}
