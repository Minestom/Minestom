package net.minestom.codegen;

import com.google.gson.*;
import com.squareup.javapoet.*;
import net.kyori.adventure.nbt.*;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.SourceVersion;
import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Locale;

public class CodeGenerator {
    protected static final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
    private static final Logger LOGGER = LoggerFactory.getLogger(CodeGenerator.class);

    private final File outputFolder;

    public CodeGenerator(File outputFolder) {
        this.outputFolder = outputFolder;
    }

    public void generate(InputStream resourceFile, String packageName, String typeName, String loaderName, String generatedName) {
        if (resourceFile == null) {
            LOGGER.error("Failed to find resource file for " + typeName);
            return;
        }
        ClassName typeClass = ClassName.get(packageName, typeName);
        ClassName loaderClass = ClassName.get(packageName, loaderName);

        JsonObject json;
        json = GSON.fromJson(new InputStreamReader(resourceFile), JsonObject.class);
        ClassName materialsCN = ClassName.get(packageName, generatedName);
        // BlockConstants class
        TypeSpec.Builder blockConstantsClass = TypeSpec.interfaceBuilder(materialsCN)
                // Add @SuppressWarnings("unused")
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember("value", "$S", "unused").build())
                .addJavadoc("Code autogenerated, do not edit!");

        // Use data
        json.keySet().forEach(namespace -> {
            final String constantName = namespace
                    .replace("minecraft:", "")
                    .replace(".", "_")
                    .toUpperCase(Locale.ROOT);
            blockConstantsClass.addField(
                    FieldSpec.builder(typeClass, constantName)
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                            .initializer(
                                    // TypeClass.STONE = MaterialLoader.fromNamespaceId("minecraft:stone")
                                    "$T.get($S)",
                                    loaderClass,
                                    namespace
                            )
                            .build()
            );
        });
        writeFiles(
                List.of(JavaFile.builder(packageName, blockConstantsClass.build())
                        .indent("    ")
                        .skipJavaLangImports(true)
                        .build()),
                outputFolder);
    }

    public void generateKeys(InputStream resourceFile, String packageName, String typeName, String generatedName) {
        if (resourceFile == null) {
            LOGGER.error("Failed to find (keys) resource file for " + typeName);
            return;
        }

        ClassName typeClass = ClassName.bestGuess(packageName + "." + typeName); // Use bestGuess to handle nested class
        ClassName registryKeyClass = ClassName.get("net.minestom.server.registry", "DynamicRegistry", "Key");
        ParameterizedTypeName typedRegistryKeyClass = ParameterizedTypeName.get(registryKeyClass, typeClass);

        JsonObject json;
        json = GSON.fromJson(new InputStreamReader(resourceFile), JsonObject.class);
        ClassName materialsCN = ClassName.get(packageName, generatedName);
        // BlockConstants class
        TypeSpec.Builder blockConstantsClass = TypeSpec.interfaceBuilder(materialsCN)
                // Add @SuppressWarnings("unused")
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember("value", "$S", "unused").build())
                .addJavadoc("Code autogenerated, do not edit!");

        // Use data
        json.keySet().forEach(namespace -> {
            String constantName = namespace
                    .replace("minecraft:", "")
                    .replace(".", "_")
                    .toUpperCase(Locale.ROOT);
            if (!SourceVersion.isName(constantName)) {
                constantName = "_" + constantName;
            }
            blockConstantsClass.addField(
                    FieldSpec.builder(typedRegistryKeyClass, constantName)
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                            .initializer(
                                    // TypeClass.STONE = NamespaceID.from("minecraft:stone")
                                    "$T.of($S)",
                                    registryKeyClass,
                                    namespace
                            )
                            .build()
            );
        });
        writeFiles(
                List.of(JavaFile.builder(packageName, blockConstantsClass.build())
                        .indent("    ")
                        .skipJavaLangImports(true)
                        .build()),
                outputFolder);
    }

    public void generateKeysAndRegistry(InputStream resourceFile, String registryName, String packageName, String typeName) {
        if (resourceFile == null) {
            LOGGER.error("Failed to find (keys) resource file for " + typeName);
            return;
        }

        ClassName typeClass = ClassName.bestGuess(packageName + "." + typeName); // Use bestGuess to handle nested class
        ClassName registryClass = ClassName.get("net.minestom.server.registry", "DynamicRegistry");
        ClassName registryKeyClass = ClassName.get("net.minestom.server.registry", "DynamicRegistry", "Key");
        ParameterizedTypeName typedRegistryKeyClass = ParameterizedTypeName.get(registryKeyClass, typeClass);

        JsonObject json;
        json = GSON.fromJson(new InputStreamReader(resourceFile), JsonObject.class);
        ClassName materialsCN = ClassName.get(packageName, typeName + "s");
        // BlockConstants class
        TypeSpec.Builder blockConstantsClass = TypeSpec.interfaceBuilder(materialsCN)
                // Add @SuppressWarnings("unused")
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember("value", "$S", "unused").build())
                .addJavadoc("Code autogenerated, do not edit!");

        // Use data
        json.keySet().forEach(namespace -> {
            String constantName = namespace
                    .replace("minecraft:", "")
                    .replace(".", "_")
                    .toUpperCase(Locale.ROOT);
            if (!SourceVersion.isName(constantName)) {
                constantName = "_" + constantName;
            }
            blockConstantsClass.addField(
                    FieldSpec.builder(typedRegistryKeyClass, constantName)
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                            .initializer(
                                    // TypeClass.STONE = NamespaceID.from("minecraft:stone")
                                    "$T.of($S)",
                                    registryKeyClass,
                                    namespace
                            )
                            .build()
            );
        });

        var createRegistryMethod = MethodSpec.methodBuilder("createDefaultRegistry")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .returns(ParameterizedTypeName.get(registryClass, typeClass))
                .addAnnotation(ClassName.get("org.jetbrains.annotations", "ApiStatus", "Internal"))
                .addJavadoc("Creates a new instance of the $S registry containing the vanilla contents.\n\n@see net.minestom.server.MinecraftServer to get an existing instance of the registry", registryName);

        createRegistryMethod.addStatement("final $T registry = $T.create($S, $T.REGISTRY_NBT_TYPE)",
                ParameterizedTypeName.get(registryClass, typeClass),
                registryClass, registryName, typeClass);

        for (var entry : json.entrySet()) {
            try {
                createRegistryMethod.addStatement("$T.registerNbt(registry, $S, $S)",
                        ClassName.get("net.minestom.server.registry", "RegistryHelper"),
                        entry.getKey(), TagStringIO.get().asString((CompoundBinaryTag) jsonToNbt(entry.getValue())));
            } catch (IOException e) {
                LOGGER.error("Failed to convert JSON to NBT for entry: " + entry.getKey(), e);
            }
        }

        createRegistryMethod.addStatement("return registry");

        blockConstantsClass.addMethod(createRegistryMethod.build());

        writeFiles(
                List.of(JavaFile.builder(packageName, blockConstantsClass.build())
                        .indent("    ")
                        .skipJavaLangImports(true)
                        .build()),
                outputFolder);
    }

    private @NotNull BinaryTag jsonToNbt(@NotNull JsonElement element) {
        return switch (element) {
            case JsonObject object -> {
                var builder = CompoundBinaryTag.builder();
                for (var entry : object.entrySet())
                    builder.put(entry.getKey(), jsonToNbt(entry.getValue()));
                yield builder.build();
            }
            case JsonArray array -> {
                if (array.isEmpty()) {
                    yield ListBinaryTag.empty();
                }
                var list = new java.util.ArrayList<BinaryTag>();
                for (var item : array)
                    list.add(jsonToNbt(item));
                yield ListBinaryTag.listBinaryTag(list.getFirst().type(), list);
            }
            case JsonPrimitive primitive -> {
                if (primitive.isString()) {
                    yield StringBinaryTag.stringBinaryTag(primitive.getAsString());
                } else if (primitive.isNumber()) {
                    yield DoubleBinaryTag.doubleBinaryTag(primitive.getAsDouble());
                } else if (primitive.isBoolean()) {
                    yield ByteBinaryTag.byteBinaryTag(primitive.getAsBoolean() ? (byte) 1 : (byte) 0);
                }
                throw new IllegalArgumentException("Unsupported JSON primitive type: " + primitive);
            }
            case JsonNull jsonNull -> throw new IllegalArgumentException("Null JSON element");
            default -> throw new IllegalArgumentException("Unsupported JSON element type: " + element.getClass());
        };
    }

    private void writeFiles(@NotNull List<JavaFile> fileList, File outputFolder) {
        for (JavaFile javaFile : fileList) {
            try {
                javaFile.writeTo(outputFolder);
            } catch (IOException e) {
                LOGGER.error("An error occured while writing source code to the file system.", e);
            }
        }
    }
}
