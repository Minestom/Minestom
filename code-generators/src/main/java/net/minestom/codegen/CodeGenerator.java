package net.minestom.codegen;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.squareup.javapoet.*;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

public class CodeGenerator {
    protected static final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
    private static final Logger LOGGER = LoggerFactory.getLogger(CodeGenerator.class);

    private final File outputFolder;

    public CodeGenerator(File outputFolder) {
        this.outputFolder = outputFolder;
    }

    public void generate(InputStream resourceFile, String packageName, String typeName, String loaderName, String generatedName) {
        if (resourceFile == null) {
            throw new IllegalStateException("Failed to find resource file for " + typeName);
        }
        ClassName typeClass = ClassName.get(packageName, typeName);
        ClassName loaderClass = ClassName.get(packageName, loaderName);

        JsonObject json;
        json = GSON.fromJson(new InputStreamReader(resourceFile), JsonObject.class);
        ClassName materialsCN = ClassName.get(packageName, generatedName);
        // BlockConstants class
        TypeSpec.Builder blockConstantsClass = TypeSpec.interfaceBuilder(materialsCN)
                // Add @SuppressWarnings("unused")
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember("value", "$S", "unused").build())
                .addJavadoc("Code autogenerated, do not edit!");

        // Use data
        json.keySet().forEach(namespace -> {
            final String constantName = Generators.namespaceToConstant(namespace);
            final String namespaceString = Generators.namespaceShort(namespace);
            blockConstantsClass.addField(
                    FieldSpec.builder(typeClass, constantName)
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                            .initializer(
                                    // TypeClass.STONE = MaterialLoader.get("stone")
                                    "$T.get($S)",
                                    loaderClass,
                                    namespaceString
                            )
                            .build()
            );
        });
        writeFiles(
                List.of(JavaFile.builder(packageName, blockConstantsClass.build())
                        .indent("    ")
                        .skipJavaLangImports(true)
                        .build()),
                outputFolder);
    }

    public void generateKeys(InputStream resourceFile, String packageName, String typeName) {
        if (resourceFile == null) {
            throw new IllegalStateException("Failed to find (keys) resource file for " + typeName);
        }

        ClassName typeClass = ClassName.bestGuess(packageName + "." + typeName); // Use bestGuess to handle nested class
        ClassName registryKeyClass = ClassName.get("net.minestom.server.registry", "RegistryKey");
        ParameterizedTypeName typedRegistryKeyClass = ParameterizedTypeName.get(registryKeyClass, typeClass);

        JsonObject json;
        json = GSON.fromJson(new InputStreamReader(resourceFile), JsonObject.class);
        ClassName materialsCN = ClassName.get(packageName, typeName + "s");
        // BlockConstants class
        TypeSpec.Builder blockConstantsClass = TypeSpec.interfaceBuilder(materialsCN)
                // Add @SuppressWarnings("unused")
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember("value", "$S", "unused").build())
                .addJavadoc("Code autogenerated, do not edit!");

        // Use data
        json.keySet().forEach(namespace -> {
            final String constantName = Generators.namespaceToConstant(namespace);
            final String namespaceString = Generators.namespaceShort(namespace);
            blockConstantsClass.addField(
                    FieldSpec.builder(typedRegistryKeyClass, constantName)
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                            .initializer(
                                    // TypeClass.STONE = NamespaceID.unsafeOf("stone")
                                    "$T.unsafeOf($S)",
                                    registryKeyClass,
                                    namespaceString
                            )
                            .build()
            );
        });
        writeFiles(
                List.of(JavaFile.builder(packageName, blockConstantsClass.build())
                        .indent("    ")
                        .skipJavaLangImports(true)
                        .build()),
                outputFolder);
    }

    private void writeFiles(@NotNull List<JavaFile> fileList, File outputFolder) {
        for (JavaFile javaFile : fileList) {
            try {
                javaFile.writeTo(outputFolder);
            } catch (IOException e) {
                LOGGER.error("An error occured while writing source code to the file system.", e);
            }
        }
    }

    public void generateRegistryKeys(List<Generators.StaticEntry> staticRegistries, List<Generators.DynamicEntry> dynamicRegistries, String packageName, String typeName, String generatedName) {
        TypeSpec.Builder registryKeyInterface = TypeSpec.interfaceBuilder(generatedName)
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember("value", "$S", "unused").build())
                .addAnnotation(AnnotationSpec.builder(ApiStatus.NonExtendable.class).build())
                .addJavadoc("Code autogenerated, do not edit!");
        ClassName registryKeyClass = ClassName.get(packageName, typeName);
        ClassName registryClassType = ClassName.get(packageName, "Registry");
        ClassName dynamicRegistryClassType = ClassName.get(packageName, "DynamicRegistry");

        // Add static registries
        for (var registry : staticRegistries) {
            ClassName registryClass = ClassName.get(registry.packageName(), registry.typeName());
            TypeName parametrizedRegistryClassType = registry.wildcardKey() ? WildcardTypeName.subtypeOf(registryClass) : registryClass;
            ParameterizedTypeName registryType =  ParameterizedTypeName.get(registryClassType, parametrizedRegistryClassType);
            ParameterizedTypeName typedRegistryKeyClass = ParameterizedTypeName.get(registryKeyClass, registryType);
            String namespace = registry.namespace();
            String constantName = Generators.namespaceToConstant(namespace);
            String shortNamespace = Generators.namespaceShort(namespace);
            registryKeyInterface.addField(FieldSpec.builder(typedRegistryKeyClass, constantName)
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer("$T.unsafeOf($S)", registryKeyClass, shortNamespace)
                    .addJavadoc("The static registry key for {@link $T}", registryClass)
                    .build());
        }
        // Add dynamic registries
        for (var registry : dynamicRegistries) {
            ClassName registryClass = ClassName.get(registry.packageName(), registry.typeName());
            ParameterizedTypeName registryType = ParameterizedTypeName.get(dynamicRegistryClassType, registryClass);
            ParameterizedTypeName typedRegistryKeyClass = ParameterizedTypeName.get(registryKeyClass, registryType);
            String namespace = registry.namespace();
            String constantName = Generators.namespaceToConstant(namespace);
            String shortNamespace = Generators.namespaceShort(namespace);
            registryKeyInterface.addField(FieldSpec.builder(typedRegistryKeyClass, constantName)
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer("$T.unsafeOf($S)", registryKeyClass, shortNamespace)
                    .addJavadoc("The dynamic registry key for {@link $T}", registryClass)
                    .build());
        }

        writeFiles(List.of(JavaFile.builder(packageName, registryKeyInterface.build())
                .indent("    ")
                .skipJavaLangImports(true)
                .build()),
                outputFolder
        );
    }
}
