package net.minestom.codegen.sounds;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.palantir.javapoet.*;
import net.minestom.codegen.MinestomCodeGenerator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.stream.StreamSupport;

public class BlockSoundTypesGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(BlockSoundTypesGenerator.class);

    private final String packageName;
    private final String className;
    private final InputStream entriesFile;
    private final File outputFolder;

    public BlockSoundTypesGenerator(
            @NotNull String packageName, @NotNull String className,
            @Nullable InputStream entriesFile, @NotNull File outputFolder
    )
    {
        this.packageName = packageName;
        this.className = className;
        this.entriesFile = entriesFile;
        this.outputFolder = outputFolder;
    }


    @Override
    public void generate() {
        if (entriesFile == null) {
            LOGGER.error("Failed to find entries file.");
            LOGGER.error("Stopped code generation for {}.", className);
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }

        JsonArray entryList = GSON.fromJson(new InputStreamReader(entriesFile), JsonArray.class);
        ClassName entryCN = ClassName.get(packageName, className);
        // This isn't loaded dynamically from a registry, just a set of static objects, so we can use a record here
        TypeSpec.Builder entryClass = TypeSpec.recordBuilder(entryCN)
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc("AUTOGENERATED by " + getClass().getSimpleName());

        ClassName soundEventCN = ClassName.get("net.minestom.server.sound", "SoundEvent");
        ClassName mapCN = ClassName.get("java.util", "HashMap");

        entryClass.recordConstructor(MethodSpec.compactConstructorBuilder()
                .addParameter(ParameterSpec.builder(float.class, "volume").build())
                .addParameter(ParameterSpec.builder(float.class, "pitch").build())
                .addParameter(ParameterSpec.builder(soundEventCN, "breakSound").addAnnotation(NotNull.class).build())
                .addParameter(ParameterSpec.builder(soundEventCN, "hitSound").addAnnotation(NotNull.class).build())
                .addParameter(ParameterSpec.builder(soundEventCN, "fallSound").addAnnotation(NotNull.class).build())
                .addParameter(ParameterSpec.builder(soundEventCN, "placeSound").addAnnotation(NotNull.class).build())
                .addParameter(ParameterSpec.builder(soundEventCN, "stepSound").addAnnotation(NotNull.class).build())
                .build());

        entryClass.addMethod(
                MethodSpec.constructorBuilder()
                        .addParameter(ParameterSpec.builder(String.class, "soundTypeName").addAnnotation(NotNull.class).build())
                        .addParameter(ParameterSpec.builder(float.class, "volume").build())
                        .addParameter(ParameterSpec.builder(float.class, "pitch").build())
                        .addParameter(ParameterSpec.builder(soundEventCN, "breakSound").addAnnotation(NotNull.class).build())
                        .addParameter(ParameterSpec.builder(soundEventCN, "hitSound").addAnnotation(NotNull.class).build())
                        .addParameter(ParameterSpec.builder(soundEventCN, "fallSound").addAnnotation(NotNull.class).build())
                        .addParameter(ParameterSpec.builder(soundEventCN, "placeSound").addAnnotation(NotNull.class).build())
                        .addParameter(ParameterSpec.builder(soundEventCN, "stepSound").addAnnotation(NotNull.class).build())
                        .addStatement("this(volume, pitch, breakSound, hitSound, fallSound, placeSound, stepSound)")
                        .addStatement("SOUND_TYPE_INDEX.put(soundTypeName.toLowerCase(), this)")
                        .build()
        );

        entryClass.addMethod(
                MethodSpec.methodBuilder("getBlockSoundType")
                        .addParameter(ParameterSpec.builder(String.class, "soundTypeName").addAnnotation(NotNull.class).build())
                        .addStatement("return SOUND_TYPE_INDEX.get(soundTypeName.toLowerCase())")
                        .returns(entryCN)
                        .addAnnotation(Nullable.class)
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .build()
        );

        entryClass.addField(FieldSpec.builder(ParameterizedTypeName.get(mapCN, TypeName.get(java.lang.String.class), entryCN), "SOUND_TYPE_INDEX", Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL).initializer("new HashMap<>()").build());

        for (JsonObject jsonObject : StreamSupport.stream(entryList.spliterator(), true).map(JsonElement::getAsJsonObject).toList()) {
            String typeName = jsonObject.get("name").getAsString();
            float volume = jsonObject.get("volume").getAsFloat();
            float pitch = jsonObject.get("pitch").getAsFloat();
            String breakSound = jsonObject.get("breakSound").getAsString();
            String hitSound = jsonObject.get("hitSound").getAsString();
            String fallSound = jsonObject.get("fallSound").getAsString();
            String placeSound = jsonObject.get("placeSound").getAsString();
            String stepSound = jsonObject.get("stepSound").getAsString();
            entryClass.addField(FieldSpec.builder(entryCN, typeName.toUpperCase(), Modifier.PUBLIC, Modifier.STATIC)
                    .initializer("new BlockSoundType($S, $Lf, $Lf, BuiltinSoundEvent.get($S), BuiltinSoundEvent.get($S), BuiltinSoundEvent.get($S), BuiltinSoundEvent.get($S), BuiltinSoundEvent.get($S))", typeName, volume, pitch, breakSound, hitSound, fallSound, placeSound, stepSound).build());
        }

        // Write files to outputFolder
        writeFiles(
                List.of(
                        JavaFile.builder(packageName, entryClass.build())
                                .indent("    ")
                                .skipJavaLangImports(true)
                                .build()
                ),
                outputFolder
        );
    }
}
