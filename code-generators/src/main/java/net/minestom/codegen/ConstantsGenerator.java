package net.minestom.codegen;

import com.google.gson.JsonObject;
import com.squareup.javapoet.*;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

public class ConstantsGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(ConstantsGenerator.class);
    private final InputStream constantsFile;
    private final File outputFolder;

    public ConstantsGenerator(@Nullable InputStream constantsFile, @NotNull File outputFolder) {
        this.constantsFile = constantsFile;
        this.outputFolder = outputFolder;
    }

    @Override
    public void generate() {
        if (constantsFile == null) {
            LOGGER.error("Failed to find constants.json.");
            LOGGER.error("Stopped code generation for recipe types.");
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }

        // Important classes we use alot
        JsonObject constants = GSON.fromJson(new InputStreamReader(constantsFile), JsonObject.class);
        ClassName minecraftConstantsCN = ClassName.get("net.minestom.server", "MinecraftConstants");
        TypeSpec.Builder constantsInterface = TypeSpec.interfaceBuilder(minecraftConstantsCN)
                .addJavadoc("AUTOGENERATED by " + getClass().getSimpleName());

        constantsInterface.addField(FieldSpec.builder(String.class, "VERSION_NAME")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                .initializer("$S", constants.get("name").getAsString())
                .build()
        );
        constantsInterface.addField(FieldSpec.builder(TypeName.INT, "PROTOCOL_VERSION")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                .initializer("$L", constants.get("protocol").getAsInt())
                .build()
        );
        constantsInterface.addField(FieldSpec.builder(TypeName.INT, "DATA_VERSION")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                .initializer("$L", constants.get("world").getAsInt())
                .build()
        );
        constantsInterface.addField(FieldSpec.builder(TypeName.INT, "RESOURCE_PACK_VERSION")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                .initializer("$L", constants.get("resourcepack").getAsInt())
                .build()
        );
        constantsInterface.addField(FieldSpec.builder(TypeName.INT, "DATA_PACK_VERSION")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                .initializer("$L", constants.get("datapack").getAsInt())
                .build()
        );

        // Write files to outputFolder
        writeFiles(
                List.of(
                        JavaFile.builder("net.minestom.server", constantsInterface.build())
                                .indent("    ")
                                .skipJavaLangImports(true)
                                .build()
                ),
                outputFolder
        );
    }

}
