package net.minestom.codegen;

import com.google.gson.JsonObject;
import com.squareup.javapoet.*;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

public final class ItemStackGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(ItemStackGenerator.class);
    private final String packageName;
    private final String typeName;
    private final InputStream resourceFile;
    private final File outputFolder;

    public ItemStackGenerator(
            @Nullable InputStream resourceFile, @NotNull String packageName,
            @NotNull String typeName, @NotNull File outputFolder
    ) {
        this.packageName = packageName;
        this.typeName = typeName;
        this.resourceFile = resourceFile;
        this.outputFolder = outputFolder;
    }

    @Override
    public void generate() {
        if (resourceFile == null) {
            LOGGER.error("Failed to find resource file for {}", typeName);
            return;
        }
        ClassName typeClass = ClassName.get(packageName, "ItemStack");
        JsonObject json;
        json = GSON.fromJson(new InputStreamReader(resourceFile), JsonObject.class);
        ClassName materialsCN = ClassName.get(packageName, "ItemStacks");
        // BlockConstants class
        TypeSpec.Builder blockConstantsClass = TypeSpec.interfaceBuilder(materialsCN)
                // Add @SuppressWarnings("unused")
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember("value", "$S", "unused").build())
                .addJavadoc("Code autogenerated, do not edit!");

        // Use data
        json.keySet().forEach(namespace -> {
            final String constantName = Generators.namespaceToConstant(namespace);
            blockConstantsClass.addField(
                    FieldSpec.builder(typeClass, constantName)
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                            .initializer(
                                    // ItemStack STONE = ItemStack.of(Material.STONE)
                                    "ItemStack.of(Material." + constantName + ")"
                            )
                            .build()
            );
        });
        writeFiles(
                List.of(JavaFile.builder(packageName, blockConstantsClass.build())
                        .indent("    ")
                        .skipJavaLangImports(true)
                        .build()),
                outputFolder);
    }
}
