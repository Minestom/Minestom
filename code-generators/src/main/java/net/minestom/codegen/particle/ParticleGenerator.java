package net.minestom.codegen.particle;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.squareup.javapoet.*;
import net.minestom.codegen.MinestomCodeGenerator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

public class ParticleGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(ParticleGenerator.class);

    // Maintenance note: all you should need to do is add/remove an entry on this map
    private static final Map<String, ClassName> PARTICLE_DATA_CLASS_NAMES = Map.of(
            "minecraft:block", ClassName.get("net.minestom.server.particle", "BlockParticle"),
            "minecraft:block_marker", ClassName.get("net.minestom.server.particle", "BlockParticle"),
            "minecraft:dust", ClassName.get("net.minestom.server.particle", "DustParticle"),
            "minecraft:dust_color_transition", ClassName.get("net.minestom.server.particle", "DustColorTransitionParticle"),
            "minecraft:falling_dust", ClassName.get("net.minestom.server.particle", "BlockParticle"),
            "minecraft:sculk_charge", ClassName.get("net.minestom.server.particle", "SculkChargeParticle"),
            "minecraft:item", ClassName.get("net.minestom.server.particle", "ItemParticle"),
            "minecraft:vibration", ClassName.get("net.minestom.server.particle", "VibrationParticle"),
            "minecraft:shriek", ClassName.get("net.minestom.server.particle", "ShriekParticle")
    );

    private final InputStream particlesFile;
    private final File outputFolder;

    public ParticleGenerator(@Nullable InputStream particlesFile, @NotNull File outputFolder) {
        this.particlesFile = particlesFile;
        this.outputFolder = outputFolder;
    }

    @Override
    public void generate() {
        if (particlesFile == null) {
            LOGGER.error("Failed to find particles.json.");
            LOGGER.error("Stopped code generation for particles.");
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }

        // Notify us if not all unique particle data key ids were found and stop the generation
        List<String> remainingParticleDataClasses = new ArrayList<>(PARTICLE_DATA_CLASS_NAMES.keySet());

        // Important classes we use alot
        ClassName particleCN = ClassName.get("net.minestom.server.particle", "Particle");
        ClassName particleImplCN = ClassName.get("net.minestom.server.particle", "ParticleImpl");

        JsonObject particleObject = GSON.fromJson(new InputStreamReader(particlesFile), JsonObject.class);
        List<Map.Entry<String, JsonElement>> orderedParticleIdObjectEntries = particleObject.entrySet().stream()
                .sorted(Comparator.comparingInt(o -> o.getValue().getAsJsonObject().get("id").getAsInt())).toList();


        // Start code gen
        ClassName particlesCN = ClassName.get("net.minestom.server.particle", "Particles");
        TypeSpec.Builder particlesInterface = TypeSpec.interfaceBuilder(particlesCN)
                .addJavadoc("AUTOGENERATED by " + getClass().getSimpleName());

        for (Map.Entry<String, JsonElement> particleIdObjectEntry : orderedParticleIdObjectEntries) {
            final String key = particleIdObjectEntry.getKey();
            ClassName fieldCN = PARTICLE_DATA_CLASS_NAMES.getOrDefault(key, particleCN);
            String cast = "";
            if (!fieldCN.equals(particleCN)) {
                // This is one of the unique particle classes with particle data, cast this
                cast = "(" + fieldCN.simpleName() + ") ";
                remainingParticleDataClasses.remove(key);
            }

            String fieldName = key.replace("minecraft:", "").toUpperCase();

            particlesInterface.addField(FieldSpec.builder(fieldCN, fieldName)
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer("$L$T.get($S)", cast, particleImplCN, key).build());
        }

        if (!remainingParticleDataClasses.isEmpty()) {
            remainingParticleDataClasses.forEach(key -> {
                LOGGER.error("Could not find unique particle data key: " + key + " in particles.json, was this key name changed?");
            });
            LOGGER.error("Stopped code generation for particles.");
            return;
        }

        writeFiles(
                List.of(JavaFile.builder("net.minestom.server.particle", particlesInterface.build())
                        .indent("    ")
                        .skipJavaLangImports(true)
                        .build()),
                outputFolder);
    }
}
