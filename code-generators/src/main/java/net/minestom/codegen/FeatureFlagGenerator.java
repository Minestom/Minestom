package net.minestom.codegen;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.squareup.javapoet.*;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

public class FeatureFlagGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(ConstantsGenerator.class);
    private final InputStream constantsFile;
    private final File outputFolder;

    public FeatureFlagGenerator(@Nullable InputStream constantsFile, @NotNull File outputFolder) {
        this.constantsFile = constantsFile;
        this.outputFolder = outputFolder;
    }

    @Override
    public void generate() {
        if (constantsFile == null) {
            LOGGER.error("Failed to find constants.json.");
            LOGGER.error("Stopped code generation for recipe types.");
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }

        JsonArray flags = GSON.fromJson(new InputStreamReader(constantsFile), JsonArray.class);
        ClassName featureFlagsCN = ClassName.get("net.minestom.server", "FeatureFlags");
        TypeSpec.Builder featureFlagInterface = TypeSpec.classBuilder(featureFlagsCN)
                .addJavadoc("AUTOGENERATED by " + getClass().getSimpleName())
                .addModifiers(Modifier.PUBLIC)
                .addModifiers(Modifier.FINAL);

        for (JsonElement namespace : flags) {
            String nsString = namespace.getAsString();
            featureFlagInterface.addField(FieldSpec.builder(ClassName.get("net.minestom.server.utils", "NamespaceID"), nsString.substring(nsString.indexOf(":")+1).toUpperCase())
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                            .initializer(
                                    CodeBlock.builder()
                                            .addStatement("$T.from($S)", ClassName.get("net.minestom.server.utils", "NamespaceID"), nsString)
                                            .build()
                            )
                            .build());
        }

        writeFiles(
                List.of(
                        JavaFile.builder("net.minestom.server", featureFlagInterface.build())
                                .indent("    ")
                                .skipJavaLangImports(true)
                                .build()
                ),
                outputFolder
        );
    }

}
